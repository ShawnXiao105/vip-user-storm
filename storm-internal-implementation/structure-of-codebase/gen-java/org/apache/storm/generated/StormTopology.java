/**
 * Autogenerated by Thrift Compiler (0.8.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.apache.storm.generated;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class StormTopology implements org.apache.thrift.TBase<StormTopology, StormTopology._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("StormTopology");

  private static final org.apache.thrift.protocol.TField SPOUTS_FIELD_DESC = new org.apache.thrift.protocol.TField("spouts", org.apache.thrift.protocol.TType.MAP, (short)1);
  private static final org.apache.thrift.protocol.TField BOLTS_FIELD_DESC = new org.apache.thrift.protocol.TField("bolts", org.apache.thrift.protocol.TType.MAP, (short)2);
  private static final org.apache.thrift.protocol.TField STATE_SPOUTS_FIELD_DESC = new org.apache.thrift.protocol.TField("state_spouts", org.apache.thrift.protocol.TType.MAP, (short)3);
  private static final org.apache.thrift.protocol.TField WORKER_HOOKS_FIELD_DESC = new org.apache.thrift.protocol.TField("worker_hooks", org.apache.thrift.protocol.TType.LIST, (short)4);
  private static final org.apache.thrift.protocol.TField DEPENDENCY_JARS_FIELD_DESC = new org.apache.thrift.protocol.TField("dependency_jars", org.apache.thrift.protocol.TType.LIST, (short)5);
  private static final org.apache.thrift.protocol.TField DEPENDENCY_ARTIFACTS_FIELD_DESC = new org.apache.thrift.protocol.TField("dependency_artifacts", org.apache.thrift.protocol.TType.LIST, (short)6);
  private static final org.apache.thrift.protocol.TField STORM_VERSION_FIELD_DESC = new org.apache.thrift.protocol.TField("storm_version", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField JDK_VERSION_FIELD_DESC = new org.apache.thrift.protocol.TField("jdk_version", org.apache.thrift.protocol.TType.STRING, (short)8);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new StormTopologyStandardSchemeFactory());
    schemes.put(TupleScheme.class, new StormTopologyTupleSchemeFactory());
  }

  public Map<String,SpoutSpec> spouts; // required
  public Map<String,Bolt> bolts; // required
  public Map<String,StateSpoutSpec> state_spouts; // required
  public List<ByteBuffer> worker_hooks; // required
  public List<String> dependency_jars; // required
  public List<String> dependency_artifacts; // required
  public String storm_version; // required
  public String jdk_version; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    SPOUTS((short)1, "spouts"),
    BOLTS((short)2, "bolts"),
    STATE_SPOUTS((short)3, "state_spouts"),
    WORKER_HOOKS((short)4, "worker_hooks"),
    DEPENDENCY_JARS((short)5, "dependency_jars"),
    DEPENDENCY_ARTIFACTS((short)6, "dependency_artifacts"),
    STORM_VERSION((short)7, "storm_version"),
    JDK_VERSION((short)8, "jdk_version");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // SPOUTS
          return SPOUTS;
        case 2: // BOLTS
          return BOLTS;
        case 3: // STATE_SPOUTS
          return STATE_SPOUTS;
        case 4: // WORKER_HOOKS
          return WORKER_HOOKS;
        case 5: // DEPENDENCY_JARS
          return DEPENDENCY_JARS;
        case 6: // DEPENDENCY_ARTIFACTS
          return DEPENDENCY_ARTIFACTS;
        case 7: // STORM_VERSION
          return STORM_VERSION;
        case 8: // JDK_VERSION
          return JDK_VERSION;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private _Fields optionals[] = {_Fields.WORKER_HOOKS,_Fields.DEPENDENCY_JARS,_Fields.DEPENDENCY_ARTIFACTS,_Fields.STORM_VERSION,_Fields.JDK_VERSION};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.SPOUTS, new org.apache.thrift.meta_data.FieldMetaData("spouts", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SpoutSpec.class))));
    tmpMap.put(_Fields.BOLTS, new org.apache.thrift.meta_data.FieldMetaData("bolts", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Bolt.class))));
    tmpMap.put(_Fields.STATE_SPOUTS, new org.apache.thrift.meta_data.FieldMetaData("state_spouts", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, StateSpoutSpec.class))));
    tmpMap.put(_Fields.WORKER_HOOKS, new org.apache.thrift.meta_data.FieldMetaData("worker_hooks", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING            , true))));
    tmpMap.put(_Fields.DEPENDENCY_JARS, new org.apache.thrift.meta_data.FieldMetaData("dependency_jars", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.DEPENDENCY_ARTIFACTS, new org.apache.thrift.meta_data.FieldMetaData("dependency_artifacts", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.STORM_VERSION, new org.apache.thrift.meta_data.FieldMetaData("storm_version", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.JDK_VERSION, new org.apache.thrift.meta_data.FieldMetaData("jdk_version", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(StormTopology.class, metaDataMap);
  }

  public StormTopology() {
  }

  public StormTopology(
    Map<String,SpoutSpec> spouts,
    Map<String,Bolt> bolts,
    Map<String,StateSpoutSpec> state_spouts)
  {
    this();
    this.spouts = spouts;
    this.bolts = bolts;
    this.state_spouts = state_spouts;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public StormTopology(StormTopology other) {
    if (other.isSetSpouts()) {
      Map<String,SpoutSpec> __this__spouts = new HashMap<String,SpoutSpec>();
      for (Map.Entry<String, SpoutSpec> other_element : other.spouts.entrySet()) {

        String other_element_key = other_element.getKey();
        SpoutSpec other_element_value = other_element.getValue();

        String __this__spouts_copy_key = other_element_key;

        SpoutSpec __this__spouts_copy_value = new SpoutSpec(other_element_value);

        __this__spouts.put(__this__spouts_copy_key, __this__spouts_copy_value);
      }
      this.spouts = __this__spouts;
    }
    if (other.isSetBolts()) {
      Map<String,Bolt> __this__bolts = new HashMap<String,Bolt>();
      for (Map.Entry<String, Bolt> other_element : other.bolts.entrySet()) {

        String other_element_key = other_element.getKey();
        Bolt other_element_value = other_element.getValue();

        String __this__bolts_copy_key = other_element_key;

        Bolt __this__bolts_copy_value = new Bolt(other_element_value);

        __this__bolts.put(__this__bolts_copy_key, __this__bolts_copy_value);
      }
      this.bolts = __this__bolts;
    }
    if (other.isSetState_spouts()) {
      Map<String,StateSpoutSpec> __this__state_spouts = new HashMap<String,StateSpoutSpec>();
      for (Map.Entry<String, StateSpoutSpec> other_element : other.state_spouts.entrySet()) {

        String other_element_key = other_element.getKey();
        StateSpoutSpec other_element_value = other_element.getValue();

        String __this__state_spouts_copy_key = other_element_key;

        StateSpoutSpec __this__state_spouts_copy_value = new StateSpoutSpec(other_element_value);

        __this__state_spouts.put(__this__state_spouts_copy_key, __this__state_spouts_copy_value);
      }
      this.state_spouts = __this__state_spouts;
    }
    if (other.isSetWorker_hooks()) {
      List<ByteBuffer> __this__worker_hooks = new ArrayList<ByteBuffer>();
      for (ByteBuffer other_element : other.worker_hooks) {
        ByteBuffer temp_binary_element = org.apache.thrift.TBaseHelper.copyBinary(other_element);
;
        __this__worker_hooks.add(temp_binary_element);
      }
      this.worker_hooks = __this__worker_hooks;
    }
    if (other.isSetDependency_jars()) {
      List<String> __this__dependency_jars = new ArrayList<String>();
      for (String other_element : other.dependency_jars) {
        __this__dependency_jars.add(other_element);
      }
      this.dependency_jars = __this__dependency_jars;
    }
    if (other.isSetDependency_artifacts()) {
      List<String> __this__dependency_artifacts = new ArrayList<String>();
      for (String other_element : other.dependency_artifacts) {
        __this__dependency_artifacts.add(other_element);
      }
      this.dependency_artifacts = __this__dependency_artifacts;
    }
    if (other.isSetStorm_version()) {
      this.storm_version = other.storm_version;
    }
    if (other.isSetJdk_version()) {
      this.jdk_version = other.jdk_version;
    }
  }

  public StormTopology deepCopy() {
    return new StormTopology(this);
  }

  @Override
  public void clear() {
    this.spouts = null;
    this.bolts = null;
    this.state_spouts = null;
    this.worker_hooks = null;
    this.dependency_jars = null;
    this.dependency_artifacts = null;
    this.storm_version = null;
    this.jdk_version = null;
  }

  public int getSpoutsSize() {
    return (this.spouts == null) ? 0 : this.spouts.size();
  }

  public void putToSpouts(String key, SpoutSpec val) {
    if (this.spouts == null) {
      this.spouts = new HashMap<String,SpoutSpec>();
    }
    this.spouts.put(key, val);
  }

  public Map<String,SpoutSpec> getSpouts() {
    return this.spouts;
  }

  public StormTopology setSpouts(Map<String,SpoutSpec> spouts) {
    this.spouts = spouts;
    return this;
  }

  public void unsetSpouts() {
    this.spouts = null;
  }

  /** Returns true if field spouts is set (has been assigned a value) and false otherwise */
  public boolean isSetSpouts() {
    return this.spouts != null;
  }

  public void setSpoutsIsSet(boolean value) {
    if (!value) {
      this.spouts = null;
    }
  }

  public int getBoltsSize() {
    return (this.bolts == null) ? 0 : this.bolts.size();
  }

  public void putToBolts(String key, Bolt val) {
    if (this.bolts == null) {
      this.bolts = new HashMap<String,Bolt>();
    }
    this.bolts.put(key, val);
  }

  public Map<String,Bolt> getBolts() {
    return this.bolts;
  }

  public StormTopology setBolts(Map<String,Bolt> bolts) {
    this.bolts = bolts;
    return this;
  }

  public void unsetBolts() {
    this.bolts = null;
  }

  /** Returns true if field bolts is set (has been assigned a value) and false otherwise */
  public boolean isSetBolts() {
    return this.bolts != null;
  }

  public void setBoltsIsSet(boolean value) {
    if (!value) {
      this.bolts = null;
    }
  }

  public int getState_spoutsSize() {
    return (this.state_spouts == null) ? 0 : this.state_spouts.size();
  }

  public void putToState_spouts(String key, StateSpoutSpec val) {
    if (this.state_spouts == null) {
      this.state_spouts = new HashMap<String,StateSpoutSpec>();
    }
    this.state_spouts.put(key, val);
  }

  public Map<String,StateSpoutSpec> getState_spouts() {
    return this.state_spouts;
  }

  public StormTopology setState_spouts(Map<String,StateSpoutSpec> state_spouts) {
    this.state_spouts = state_spouts;
    return this;
  }

  public void unsetState_spouts() {
    this.state_spouts = null;
  }

  /** Returns true if field state_spouts is set (has been assigned a value) and false otherwise */
  public boolean isSetState_spouts() {
    return this.state_spouts != null;
  }

  public void setState_spoutsIsSet(boolean value) {
    if (!value) {
      this.state_spouts = null;
    }
  }

  public int getWorker_hooksSize() {
    return (this.worker_hooks == null) ? 0 : this.worker_hooks.size();
  }

  public java.util.Iterator<ByteBuffer> getWorker_hooksIterator() {
    return (this.worker_hooks == null) ? null : this.worker_hooks.iterator();
  }

  public void addToWorker_hooks(ByteBuffer elem) {
    if (this.worker_hooks == null) {
      this.worker_hooks = new ArrayList<ByteBuffer>();
    }
    this.worker_hooks.add(elem);
  }

  public List<ByteBuffer> getWorker_hooks() {
    return this.worker_hooks;
  }

  public StormTopology setWorker_hooks(List<ByteBuffer> worker_hooks) {
    this.worker_hooks = worker_hooks;
    return this;
  }

  public void unsetWorker_hooks() {
    this.worker_hooks = null;
  }

  /** Returns true if field worker_hooks is set (has been assigned a value) and false otherwise */
  public boolean isSetWorker_hooks() {
    return this.worker_hooks != null;
  }

  public void setWorker_hooksIsSet(boolean value) {
    if (!value) {
      this.worker_hooks = null;
    }
  }

  public int getDependency_jarsSize() {
    return (this.dependency_jars == null) ? 0 : this.dependency_jars.size();
  }

  public java.util.Iterator<String> getDependency_jarsIterator() {
    return (this.dependency_jars == null) ? null : this.dependency_jars.iterator();
  }

  public void addToDependency_jars(String elem) {
    if (this.dependency_jars == null) {
      this.dependency_jars = new ArrayList<String>();
    }
    this.dependency_jars.add(elem);
  }

  public List<String> getDependency_jars() {
    return this.dependency_jars;
  }

  public StormTopology setDependency_jars(List<String> dependency_jars) {
    this.dependency_jars = dependency_jars;
    return this;
  }

  public void unsetDependency_jars() {
    this.dependency_jars = null;
  }

  /** Returns true if field dependency_jars is set (has been assigned a value) and false otherwise */
  public boolean isSetDependency_jars() {
    return this.dependency_jars != null;
  }

  public void setDependency_jarsIsSet(boolean value) {
    if (!value) {
      this.dependency_jars = null;
    }
  }

  public int getDependency_artifactsSize() {
    return (this.dependency_artifacts == null) ? 0 : this.dependency_artifacts.size();
  }

  public java.util.Iterator<String> getDependency_artifactsIterator() {
    return (this.dependency_artifacts == null) ? null : this.dependency_artifacts.iterator();
  }

  public void addToDependency_artifacts(String elem) {
    if (this.dependency_artifacts == null) {
      this.dependency_artifacts = new ArrayList<String>();
    }
    this.dependency_artifacts.add(elem);
  }

  public List<String> getDependency_artifacts() {
    return this.dependency_artifacts;
  }

  public StormTopology setDependency_artifacts(List<String> dependency_artifacts) {
    this.dependency_artifacts = dependency_artifacts;
    return this;
  }

  public void unsetDependency_artifacts() {
    this.dependency_artifacts = null;
  }

  /** Returns true if field dependency_artifacts is set (has been assigned a value) and false otherwise */
  public boolean isSetDependency_artifacts() {
    return this.dependency_artifacts != null;
  }

  public void setDependency_artifactsIsSet(boolean value) {
    if (!value) {
      this.dependency_artifacts = null;
    }
  }

  public String getStorm_version() {
    return this.storm_version;
  }

  public StormTopology setStorm_version(String storm_version) {
    this.storm_version = storm_version;
    return this;
  }

  public void unsetStorm_version() {
    this.storm_version = null;
  }

  /** Returns true if field storm_version is set (has been assigned a value) and false otherwise */
  public boolean isSetStorm_version() {
    return this.storm_version != null;
  }

  public void setStorm_versionIsSet(boolean value) {
    if (!value) {
      this.storm_version = null;
    }
  }

  public String getJdk_version() {
    return this.jdk_version;
  }

  public StormTopology setJdk_version(String jdk_version) {
    this.jdk_version = jdk_version;
    return this;
  }

  public void unsetJdk_version() {
    this.jdk_version = null;
  }

  /** Returns true if field jdk_version is set (has been assigned a value) and false otherwise */
  public boolean isSetJdk_version() {
    return this.jdk_version != null;
  }

  public void setJdk_versionIsSet(boolean value) {
    if (!value) {
      this.jdk_version = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case SPOUTS:
      if (value == null) {
        unsetSpouts();
      } else {
        setSpouts((Map<String,SpoutSpec>)value);
      }
      break;

    case BOLTS:
      if (value == null) {
        unsetBolts();
      } else {
        setBolts((Map<String,Bolt>)value);
      }
      break;

    case STATE_SPOUTS:
      if (value == null) {
        unsetState_spouts();
      } else {
        setState_spouts((Map<String,StateSpoutSpec>)value);
      }
      break;

    case WORKER_HOOKS:
      if (value == null) {
        unsetWorker_hooks();
      } else {
        setWorker_hooks((List<ByteBuffer>)value);
      }
      break;

    case DEPENDENCY_JARS:
      if (value == null) {
        unsetDependency_jars();
      } else {
        setDependency_jars((List<String>)value);
      }
      break;

    case DEPENDENCY_ARTIFACTS:
      if (value == null) {
        unsetDependency_artifacts();
      } else {
        setDependency_artifacts((List<String>)value);
      }
      break;

    case STORM_VERSION:
      if (value == null) {
        unsetStorm_version();
      } else {
        setStorm_version((String)value);
      }
      break;

    case JDK_VERSION:
      if (value == null) {
        unsetJdk_version();
      } else {
        setJdk_version((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case SPOUTS:
      return getSpouts();

    case BOLTS:
      return getBolts();

    case STATE_SPOUTS:
      return getState_spouts();

    case WORKER_HOOKS:
      return getWorker_hooks();

    case DEPENDENCY_JARS:
      return getDependency_jars();

    case DEPENDENCY_ARTIFACTS:
      return getDependency_artifacts();

    case STORM_VERSION:
      return getStorm_version();

    case JDK_VERSION:
      return getJdk_version();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case SPOUTS:
      return isSetSpouts();
    case BOLTS:
      return isSetBolts();
    case STATE_SPOUTS:
      return isSetState_spouts();
    case WORKER_HOOKS:
      return isSetWorker_hooks();
    case DEPENDENCY_JARS:
      return isSetDependency_jars();
    case DEPENDENCY_ARTIFACTS:
      return isSetDependency_artifacts();
    case STORM_VERSION:
      return isSetStorm_version();
    case JDK_VERSION:
      return isSetJdk_version();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof StormTopology)
      return this.equals((StormTopology)that);
    return false;
  }

  public boolean equals(StormTopology that) {
    if (that == null)
      return false;

    boolean this_present_spouts = true && this.isSetSpouts();
    boolean that_present_spouts = true && that.isSetSpouts();
    if (this_present_spouts || that_present_spouts) {
      if (!(this_present_spouts && that_present_spouts))
        return false;
      if (!this.spouts.equals(that.spouts))
        return false;
    }

    boolean this_present_bolts = true && this.isSetBolts();
    boolean that_present_bolts = true && that.isSetBolts();
    if (this_present_bolts || that_present_bolts) {
      if (!(this_present_bolts && that_present_bolts))
        return false;
      if (!this.bolts.equals(that.bolts))
        return false;
    }

    boolean this_present_state_spouts = true && this.isSetState_spouts();
    boolean that_present_state_spouts = true && that.isSetState_spouts();
    if (this_present_state_spouts || that_present_state_spouts) {
      if (!(this_present_state_spouts && that_present_state_spouts))
        return false;
      if (!this.state_spouts.equals(that.state_spouts))
        return false;
    }

    boolean this_present_worker_hooks = true && this.isSetWorker_hooks();
    boolean that_present_worker_hooks = true && that.isSetWorker_hooks();
    if (this_present_worker_hooks || that_present_worker_hooks) {
      if (!(this_present_worker_hooks && that_present_worker_hooks))
        return false;
      if (!this.worker_hooks.equals(that.worker_hooks))
        return false;
    }

    boolean this_present_dependency_jars = true && this.isSetDependency_jars();
    boolean that_present_dependency_jars = true && that.isSetDependency_jars();
    if (this_present_dependency_jars || that_present_dependency_jars) {
      if (!(this_present_dependency_jars && that_present_dependency_jars))
        return false;
      if (!this.dependency_jars.equals(that.dependency_jars))
        return false;
    }

    boolean this_present_dependency_artifacts = true && this.isSetDependency_artifacts();
    boolean that_present_dependency_artifacts = true && that.isSetDependency_artifacts();
    if (this_present_dependency_artifacts || that_present_dependency_artifacts) {
      if (!(this_present_dependency_artifacts && that_present_dependency_artifacts))
        return false;
      if (!this.dependency_artifacts.equals(that.dependency_artifacts))
        return false;
    }

    boolean this_present_storm_version = true && this.isSetStorm_version();
    boolean that_present_storm_version = true && that.isSetStorm_version();
    if (this_present_storm_version || that_present_storm_version) {
      if (!(this_present_storm_version && that_present_storm_version))
        return false;
      if (!this.storm_version.equals(that.storm_version))
        return false;
    }

    boolean this_present_jdk_version = true && this.isSetJdk_version();
    boolean that_present_jdk_version = true && that.isSetJdk_version();
    if (this_present_jdk_version || that_present_jdk_version) {
      if (!(this_present_jdk_version && that_present_jdk_version))
        return false;
      if (!this.jdk_version.equals(that.jdk_version))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(StormTopology other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    StormTopology typedOther = (StormTopology)other;

    lastComparison = Boolean.valueOf(isSetSpouts()).compareTo(typedOther.isSetSpouts());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSpouts()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.spouts, typedOther.spouts);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBolts()).compareTo(typedOther.isSetBolts());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBolts()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bolts, typedOther.bolts);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetState_spouts()).compareTo(typedOther.isSetState_spouts());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetState_spouts()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.state_spouts, typedOther.state_spouts);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetWorker_hooks()).compareTo(typedOther.isSetWorker_hooks());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWorker_hooks()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.worker_hooks, typedOther.worker_hooks);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDependency_jars()).compareTo(typedOther.isSetDependency_jars());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDependency_jars()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dependency_jars, typedOther.dependency_jars);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDependency_artifacts()).compareTo(typedOther.isSetDependency_artifacts());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDependency_artifacts()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dependency_artifacts, typedOther.dependency_artifacts);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStorm_version()).compareTo(typedOther.isSetStorm_version());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStorm_version()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.storm_version, typedOther.storm_version);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetJdk_version()).compareTo(typedOther.isSetJdk_version());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetJdk_version()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.jdk_version, typedOther.jdk_version);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("StormTopology(");
    boolean first = true;

    sb.append("spouts:");
    if (this.spouts == null) {
      sb.append("null");
    } else {
      sb.append(this.spouts);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("bolts:");
    if (this.bolts == null) {
      sb.append("null");
    } else {
      sb.append(this.bolts);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("state_spouts:");
    if (this.state_spouts == null) {
      sb.append("null");
    } else {
      sb.append(this.state_spouts);
    }
    first = false;
    if (isSetWorker_hooks()) {
      if (!first) sb.append(", ");
      sb.append("worker_hooks:");
      if (this.worker_hooks == null) {
        sb.append("null");
      } else {
        sb.append(this.worker_hooks);
      }
      first = false;
    }
    if (isSetDependency_jars()) {
      if (!first) sb.append(", ");
      sb.append("dependency_jars:");
      if (this.dependency_jars == null) {
        sb.append("null");
      } else {
        sb.append(this.dependency_jars);
      }
      first = false;
    }
    if (isSetDependency_artifacts()) {
      if (!first) sb.append(", ");
      sb.append("dependency_artifacts:");
      if (this.dependency_artifacts == null) {
        sb.append("null");
      } else {
        sb.append(this.dependency_artifacts);
      }
      first = false;
    }
    if (isSetStorm_version()) {
      if (!first) sb.append(", ");
      sb.append("storm_version:");
      if (this.storm_version == null) {
        sb.append("null");
      } else {
        sb.append(this.storm_version);
      }
      first = false;
    }
    if (isSetJdk_version()) {
      if (!first) sb.append(", ");
      sb.append("jdk_version:");
      if (this.jdk_version == null) {
        sb.append("null");
      } else {
        sb.append(this.jdk_version);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (spouts == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'spouts' was not present! Struct: " + toString());
    }
    if (bolts == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'bolts' was not present! Struct: " + toString());
    }
    if (state_spouts == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'state_spouts' was not present! Struct: " + toString());
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class StormTopologyStandardSchemeFactory implements SchemeFactory {
    public StormTopologyStandardScheme getScheme() {
      return new StormTopologyStandardScheme();
    }
  }

  private static class StormTopologyStandardScheme extends StandardScheme<StormTopology> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, StormTopology struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // SPOUTS
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map44 = iprot.readMapBegin();
                struct.spouts = new HashMap<String,SpoutSpec>(2*_map44.size);
                for (int _i45 = 0; _i45 < _map44.size; ++_i45)
                {
                  String _key46; // required
                  SpoutSpec _val47; // required
                  _key46 = iprot.readString();
                  _val47 = new SpoutSpec();
                  _val47.read(iprot);
                  struct.spouts.put(_key46, _val47);
                }
                iprot.readMapEnd();
              }
              struct.setSpoutsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // BOLTS
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map48 = iprot.readMapBegin();
                struct.bolts = new HashMap<String,Bolt>(2*_map48.size);
                for (int _i49 = 0; _i49 < _map48.size; ++_i49)
                {
                  String _key50; // required
                  Bolt _val51; // required
                  _key50 = iprot.readString();
                  _val51 = new Bolt();
                  _val51.read(iprot);
                  struct.bolts.put(_key50, _val51);
                }
                iprot.readMapEnd();
              }
              struct.setBoltsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // STATE_SPOUTS
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map52 = iprot.readMapBegin();
                struct.state_spouts = new HashMap<String,StateSpoutSpec>(2*_map52.size);
                for (int _i53 = 0; _i53 < _map52.size; ++_i53)
                {
                  String _key54; // required
                  StateSpoutSpec _val55; // required
                  _key54 = iprot.readString();
                  _val55 = new StateSpoutSpec();
                  _val55.read(iprot);
                  struct.state_spouts.put(_key54, _val55);
                }
                iprot.readMapEnd();
              }
              struct.setState_spoutsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // WORKER_HOOKS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list56 = iprot.readListBegin();
                struct.worker_hooks = new ArrayList<ByteBuffer>(_list56.size);
                for (int _i57 = 0; _i57 < _list56.size; ++_i57)
                {
                  ByteBuffer _elem58; // required
                  _elem58 = iprot.readBinary();
                  struct.worker_hooks.add(_elem58);
                }
                iprot.readListEnd();
              }
              struct.setWorker_hooksIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // DEPENDENCY_JARS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list59 = iprot.readListBegin();
                struct.dependency_jars = new ArrayList<String>(_list59.size);
                for (int _i60 = 0; _i60 < _list59.size; ++_i60)
                {
                  String _elem61; // required
                  _elem61 = iprot.readString();
                  struct.dependency_jars.add(_elem61);
                }
                iprot.readListEnd();
              }
              struct.setDependency_jarsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // DEPENDENCY_ARTIFACTS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list62 = iprot.readListBegin();
                struct.dependency_artifacts = new ArrayList<String>(_list62.size);
                for (int _i63 = 0; _i63 < _list62.size; ++_i63)
                {
                  String _elem64; // required
                  _elem64 = iprot.readString();
                  struct.dependency_artifacts.add(_elem64);
                }
                iprot.readListEnd();
              }
              struct.setDependency_artifactsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // STORM_VERSION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.storm_version = iprot.readString();
              struct.setStorm_versionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // JDK_VERSION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.jdk_version = iprot.readString();
              struct.setJdk_versionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, StormTopology struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.spouts != null) {
        oprot.writeFieldBegin(SPOUTS_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRUCT, struct.spouts.size()));
          for (Map.Entry<String, SpoutSpec> _iter65 : struct.spouts.entrySet())
          {
            oprot.writeString(_iter65.getKey());
            _iter65.getValue().write(oprot);
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.bolts != null) {
        oprot.writeFieldBegin(BOLTS_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRUCT, struct.bolts.size()));
          for (Map.Entry<String, Bolt> _iter66 : struct.bolts.entrySet())
          {
            oprot.writeString(_iter66.getKey());
            _iter66.getValue().write(oprot);
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.state_spouts != null) {
        oprot.writeFieldBegin(STATE_SPOUTS_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRUCT, struct.state_spouts.size()));
          for (Map.Entry<String, StateSpoutSpec> _iter67 : struct.state_spouts.entrySet())
          {
            oprot.writeString(_iter67.getKey());
            _iter67.getValue().write(oprot);
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.worker_hooks != null) {
        if (struct.isSetWorker_hooks()) {
          oprot.writeFieldBegin(WORKER_HOOKS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.worker_hooks.size()));
            for (ByteBuffer _iter68 : struct.worker_hooks)
            {
              oprot.writeBinary(_iter68);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.dependency_jars != null) {
        if (struct.isSetDependency_jars()) {
          oprot.writeFieldBegin(DEPENDENCY_JARS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.dependency_jars.size()));
            for (String _iter69 : struct.dependency_jars)
            {
              oprot.writeString(_iter69);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.dependency_artifacts != null) {
        if (struct.isSetDependency_artifacts()) {
          oprot.writeFieldBegin(DEPENDENCY_ARTIFACTS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.dependency_artifacts.size()));
            for (String _iter70 : struct.dependency_artifacts)
            {
              oprot.writeString(_iter70);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.storm_version != null) {
        if (struct.isSetStorm_version()) {
          oprot.writeFieldBegin(STORM_VERSION_FIELD_DESC);
          oprot.writeString(struct.storm_version);
          oprot.writeFieldEnd();
        }
      }
      if (struct.jdk_version != null) {
        if (struct.isSetJdk_version()) {
          oprot.writeFieldBegin(JDK_VERSION_FIELD_DESC);
          oprot.writeString(struct.jdk_version);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class StormTopologyTupleSchemeFactory implements SchemeFactory {
    public StormTopologyTupleScheme getScheme() {
      return new StormTopologyTupleScheme();
    }
  }

  private static class StormTopologyTupleScheme extends TupleScheme<StormTopology> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, StormTopology struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      {
        oprot.writeI32(struct.spouts.size());
        for (Map.Entry<String, SpoutSpec> _iter71 : struct.spouts.entrySet())
        {
          oprot.writeString(_iter71.getKey());
          _iter71.getValue().write(oprot);
        }
      }
      {
        oprot.writeI32(struct.bolts.size());
        for (Map.Entry<String, Bolt> _iter72 : struct.bolts.entrySet())
        {
          oprot.writeString(_iter72.getKey());
          _iter72.getValue().write(oprot);
        }
      }
      {
        oprot.writeI32(struct.state_spouts.size());
        for (Map.Entry<String, StateSpoutSpec> _iter73 : struct.state_spouts.entrySet())
        {
          oprot.writeString(_iter73.getKey());
          _iter73.getValue().write(oprot);
        }
      }
      BitSet optionals = new BitSet();
      if (struct.isSetWorker_hooks()) {
        optionals.set(0);
      }
      if (struct.isSetDependency_jars()) {
        optionals.set(1);
      }
      if (struct.isSetDependency_artifacts()) {
        optionals.set(2);
      }
      if (struct.isSetStorm_version()) {
        optionals.set(3);
      }
      if (struct.isSetJdk_version()) {
        optionals.set(4);
      }
      oprot.writeBitSet(optionals, 5);
      if (struct.isSetWorker_hooks()) {
        {
          oprot.writeI32(struct.worker_hooks.size());
          for (ByteBuffer _iter74 : struct.worker_hooks)
          {
            oprot.writeBinary(_iter74);
          }
        }
      }
      if (struct.isSetDependency_jars()) {
        {
          oprot.writeI32(struct.dependency_jars.size());
          for (String _iter75 : struct.dependency_jars)
          {
            oprot.writeString(_iter75);
          }
        }
      }
      if (struct.isSetDependency_artifacts()) {
        {
          oprot.writeI32(struct.dependency_artifacts.size());
          for (String _iter76 : struct.dependency_artifacts)
          {
            oprot.writeString(_iter76);
          }
        }
      }
      if (struct.isSetStorm_version()) {
        oprot.writeString(struct.storm_version);
      }
      if (struct.isSetJdk_version()) {
        oprot.writeString(struct.jdk_version);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, StormTopology struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      {
        org.apache.thrift.protocol.TMap _map77 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
        struct.spouts = new HashMap<String,SpoutSpec>(2*_map77.size);
        for (int _i78 = 0; _i78 < _map77.size; ++_i78)
        {
          String _key79; // required
          SpoutSpec _val80; // required
          _key79 = iprot.readString();
          _val80 = new SpoutSpec();
          _val80.read(iprot);
          struct.spouts.put(_key79, _val80);
        }
      }
      struct.setSpoutsIsSet(true);
      {
        org.apache.thrift.protocol.TMap _map81 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
        struct.bolts = new HashMap<String,Bolt>(2*_map81.size);
        for (int _i82 = 0; _i82 < _map81.size; ++_i82)
        {
          String _key83; // required
          Bolt _val84; // required
          _key83 = iprot.readString();
          _val84 = new Bolt();
          _val84.read(iprot);
          struct.bolts.put(_key83, _val84);
        }
      }
      struct.setBoltsIsSet(true);
      {
        org.apache.thrift.protocol.TMap _map85 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
        struct.state_spouts = new HashMap<String,StateSpoutSpec>(2*_map85.size);
        for (int _i86 = 0; _i86 < _map85.size; ++_i86)
        {
          String _key87; // required
          StateSpoutSpec _val88; // required
          _key87 = iprot.readString();
          _val88 = new StateSpoutSpec();
          _val88.read(iprot);
          struct.state_spouts.put(_key87, _val88);
        }
      }
      struct.setState_spoutsIsSet(true);
      BitSet incoming = iprot.readBitSet(5);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TList _list89 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.worker_hooks = new ArrayList<ByteBuffer>(_list89.size);
          for (int _i90 = 0; _i90 < _list89.size; ++_i90)
          {
            ByteBuffer _elem91; // required
            _elem91 = iprot.readBinary();
            struct.worker_hooks.add(_elem91);
          }
        }
        struct.setWorker_hooksIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list92 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.dependency_jars = new ArrayList<String>(_list92.size);
          for (int _i93 = 0; _i93 < _list92.size; ++_i93)
          {
            String _elem94; // required
            _elem94 = iprot.readString();
            struct.dependency_jars.add(_elem94);
          }
        }
        struct.setDependency_jarsIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TList _list95 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.dependency_artifacts = new ArrayList<String>(_list95.size);
          for (int _i96 = 0; _i96 < _list95.size; ++_i96)
          {
            String _elem97; // required
            _elem97 = iprot.readString();
            struct.dependency_artifacts.add(_elem97);
          }
        }
        struct.setDependency_artifactsIsSet(true);
      }
      if (incoming.get(3)) {
        struct.storm_version = iprot.readString();
        struct.setStorm_versionIsSet(true);
      }
      if (incoming.get(4)) {
        struct.jdk_version = iprot.readString();
        struct.setJdk_versionIsSet(true);
      }
    }
  }

}

