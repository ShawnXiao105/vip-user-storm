/**
 * Autogenerated by Thrift Compiler (0.8.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.apache.storm.generated;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class BoltStats implements org.apache.thrift.TBase<BoltStats, BoltStats._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("BoltStats");

  private static final org.apache.thrift.protocol.TField ACKED_FIELD_DESC = new org.apache.thrift.protocol.TField("acked", org.apache.thrift.protocol.TType.MAP, (short)1);
  private static final org.apache.thrift.protocol.TField FAILED_FIELD_DESC = new org.apache.thrift.protocol.TField("failed", org.apache.thrift.protocol.TType.MAP, (short)2);
  private static final org.apache.thrift.protocol.TField PROCESS_MS_AVG_FIELD_DESC = new org.apache.thrift.protocol.TField("process_ms_avg", org.apache.thrift.protocol.TType.MAP, (short)3);
  private static final org.apache.thrift.protocol.TField EXECUTED_FIELD_DESC = new org.apache.thrift.protocol.TField("executed", org.apache.thrift.protocol.TType.MAP, (short)4);
  private static final org.apache.thrift.protocol.TField EXECUTE_MS_AVG_FIELD_DESC = new org.apache.thrift.protocol.TField("execute_ms_avg", org.apache.thrift.protocol.TType.MAP, (short)5);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new BoltStatsStandardSchemeFactory());
    schemes.put(TupleScheme.class, new BoltStatsTupleSchemeFactory());
  }

  public Map<String,Map<GlobalStreamId,Long>> acked; // required
  public Map<String,Map<GlobalStreamId,Long>> failed; // required
  public Map<String,Map<GlobalStreamId,Double>> process_ms_avg; // required
  public Map<String,Map<GlobalStreamId,Long>> executed; // required
  public Map<String,Map<GlobalStreamId,Double>> execute_ms_avg; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ACKED((short)1, "acked"),
    FAILED((short)2, "failed"),
    PROCESS_MS_AVG((short)3, "process_ms_avg"),
    EXECUTED((short)4, "executed"),
    EXECUTE_MS_AVG((short)5, "execute_ms_avg");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ACKED
          return ACKED;
        case 2: // FAILED
          return FAILED;
        case 3: // PROCESS_MS_AVG
          return PROCESS_MS_AVG;
        case 4: // EXECUTED
          return EXECUTED;
        case 5: // EXECUTE_MS_AVG
          return EXECUTE_MS_AVG;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ACKED, new org.apache.thrift.meta_data.FieldMetaData("acked", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
                new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, GlobalStreamId.class), 
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)))));
    tmpMap.put(_Fields.FAILED, new org.apache.thrift.meta_data.FieldMetaData("failed", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
                new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, GlobalStreamId.class), 
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)))));
    tmpMap.put(_Fields.PROCESS_MS_AVG, new org.apache.thrift.meta_data.FieldMetaData("process_ms_avg", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
                new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, GlobalStreamId.class), 
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)))));
    tmpMap.put(_Fields.EXECUTED, new org.apache.thrift.meta_data.FieldMetaData("executed", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
                new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, GlobalStreamId.class), 
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)))));
    tmpMap.put(_Fields.EXECUTE_MS_AVG, new org.apache.thrift.meta_data.FieldMetaData("execute_ms_avg", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
                new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, GlobalStreamId.class), 
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(BoltStats.class, metaDataMap);
  }

  public BoltStats() {
  }

  public BoltStats(
    Map<String,Map<GlobalStreamId,Long>> acked,
    Map<String,Map<GlobalStreamId,Long>> failed,
    Map<String,Map<GlobalStreamId,Double>> process_ms_avg,
    Map<String,Map<GlobalStreamId,Long>> executed,
    Map<String,Map<GlobalStreamId,Double>> execute_ms_avg)
  {
    this();
    this.acked = acked;
    this.failed = failed;
    this.process_ms_avg = process_ms_avg;
    this.executed = executed;
    this.execute_ms_avg = execute_ms_avg;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public BoltStats(BoltStats other) {
    if (other.isSetAcked()) {
      Map<String,Map<GlobalStreamId,Long>> __this__acked = new HashMap<String,Map<GlobalStreamId,Long>>();
      for (Map.Entry<String, Map<GlobalStreamId,Long>> other_element : other.acked.entrySet()) {

        String other_element_key = other_element.getKey();
        Map<GlobalStreamId,Long> other_element_value = other_element.getValue();

        String __this__acked_copy_key = other_element_key;

        Map<GlobalStreamId,Long> __this__acked_copy_value = new HashMap<GlobalStreamId,Long>();
        for (Map.Entry<GlobalStreamId, Long> other_element_value_element : other_element_value.entrySet()) {

          GlobalStreamId other_element_value_element_key = other_element_value_element.getKey();
          Long other_element_value_element_value = other_element_value_element.getValue();

          GlobalStreamId __this__acked_copy_value_copy_key = new GlobalStreamId(other_element_value_element_key);

          Long __this__acked_copy_value_copy_value = other_element_value_element_value;

          __this__acked_copy_value.put(__this__acked_copy_value_copy_key, __this__acked_copy_value_copy_value);
        }

        __this__acked.put(__this__acked_copy_key, __this__acked_copy_value);
      }
      this.acked = __this__acked;
    }
    if (other.isSetFailed()) {
      Map<String,Map<GlobalStreamId,Long>> __this__failed = new HashMap<String,Map<GlobalStreamId,Long>>();
      for (Map.Entry<String, Map<GlobalStreamId,Long>> other_element : other.failed.entrySet()) {

        String other_element_key = other_element.getKey();
        Map<GlobalStreamId,Long> other_element_value = other_element.getValue();

        String __this__failed_copy_key = other_element_key;

        Map<GlobalStreamId,Long> __this__failed_copy_value = new HashMap<GlobalStreamId,Long>();
        for (Map.Entry<GlobalStreamId, Long> other_element_value_element : other_element_value.entrySet()) {

          GlobalStreamId other_element_value_element_key = other_element_value_element.getKey();
          Long other_element_value_element_value = other_element_value_element.getValue();

          GlobalStreamId __this__failed_copy_value_copy_key = new GlobalStreamId(other_element_value_element_key);

          Long __this__failed_copy_value_copy_value = other_element_value_element_value;

          __this__failed_copy_value.put(__this__failed_copy_value_copy_key, __this__failed_copy_value_copy_value);
        }

        __this__failed.put(__this__failed_copy_key, __this__failed_copy_value);
      }
      this.failed = __this__failed;
    }
    if (other.isSetProcess_ms_avg()) {
      Map<String,Map<GlobalStreamId,Double>> __this__process_ms_avg = new HashMap<String,Map<GlobalStreamId,Double>>();
      for (Map.Entry<String, Map<GlobalStreamId,Double>> other_element : other.process_ms_avg.entrySet()) {

        String other_element_key = other_element.getKey();
        Map<GlobalStreamId,Double> other_element_value = other_element.getValue();

        String __this__process_ms_avg_copy_key = other_element_key;

        Map<GlobalStreamId,Double> __this__process_ms_avg_copy_value = new HashMap<GlobalStreamId,Double>();
        for (Map.Entry<GlobalStreamId, Double> other_element_value_element : other_element_value.entrySet()) {

          GlobalStreamId other_element_value_element_key = other_element_value_element.getKey();
          Double other_element_value_element_value = other_element_value_element.getValue();

          GlobalStreamId __this__process_ms_avg_copy_value_copy_key = new GlobalStreamId(other_element_value_element_key);

          Double __this__process_ms_avg_copy_value_copy_value = other_element_value_element_value;

          __this__process_ms_avg_copy_value.put(__this__process_ms_avg_copy_value_copy_key, __this__process_ms_avg_copy_value_copy_value);
        }

        __this__process_ms_avg.put(__this__process_ms_avg_copy_key, __this__process_ms_avg_copy_value);
      }
      this.process_ms_avg = __this__process_ms_avg;
    }
    if (other.isSetExecuted()) {
      Map<String,Map<GlobalStreamId,Long>> __this__executed = new HashMap<String,Map<GlobalStreamId,Long>>();
      for (Map.Entry<String, Map<GlobalStreamId,Long>> other_element : other.executed.entrySet()) {

        String other_element_key = other_element.getKey();
        Map<GlobalStreamId,Long> other_element_value = other_element.getValue();

        String __this__executed_copy_key = other_element_key;

        Map<GlobalStreamId,Long> __this__executed_copy_value = new HashMap<GlobalStreamId,Long>();
        for (Map.Entry<GlobalStreamId, Long> other_element_value_element : other_element_value.entrySet()) {

          GlobalStreamId other_element_value_element_key = other_element_value_element.getKey();
          Long other_element_value_element_value = other_element_value_element.getValue();

          GlobalStreamId __this__executed_copy_value_copy_key = new GlobalStreamId(other_element_value_element_key);

          Long __this__executed_copy_value_copy_value = other_element_value_element_value;

          __this__executed_copy_value.put(__this__executed_copy_value_copy_key, __this__executed_copy_value_copy_value);
        }

        __this__executed.put(__this__executed_copy_key, __this__executed_copy_value);
      }
      this.executed = __this__executed;
    }
    if (other.isSetExecute_ms_avg()) {
      Map<String,Map<GlobalStreamId,Double>> __this__execute_ms_avg = new HashMap<String,Map<GlobalStreamId,Double>>();
      for (Map.Entry<String, Map<GlobalStreamId,Double>> other_element : other.execute_ms_avg.entrySet()) {

        String other_element_key = other_element.getKey();
        Map<GlobalStreamId,Double> other_element_value = other_element.getValue();

        String __this__execute_ms_avg_copy_key = other_element_key;

        Map<GlobalStreamId,Double> __this__execute_ms_avg_copy_value = new HashMap<GlobalStreamId,Double>();
        for (Map.Entry<GlobalStreamId, Double> other_element_value_element : other_element_value.entrySet()) {

          GlobalStreamId other_element_value_element_key = other_element_value_element.getKey();
          Double other_element_value_element_value = other_element_value_element.getValue();

          GlobalStreamId __this__execute_ms_avg_copy_value_copy_key = new GlobalStreamId(other_element_value_element_key);

          Double __this__execute_ms_avg_copy_value_copy_value = other_element_value_element_value;

          __this__execute_ms_avg_copy_value.put(__this__execute_ms_avg_copy_value_copy_key, __this__execute_ms_avg_copy_value_copy_value);
        }

        __this__execute_ms_avg.put(__this__execute_ms_avg_copy_key, __this__execute_ms_avg_copy_value);
      }
      this.execute_ms_avg = __this__execute_ms_avg;
    }
  }

  public BoltStats deepCopy() {
    return new BoltStats(this);
  }

  @Override
  public void clear() {
    this.acked = null;
    this.failed = null;
    this.process_ms_avg = null;
    this.executed = null;
    this.execute_ms_avg = null;
  }

  public int getAckedSize() {
    return (this.acked == null) ? 0 : this.acked.size();
  }

  public void putToAcked(String key, Map<GlobalStreamId,Long> val) {
    if (this.acked == null) {
      this.acked = new HashMap<String,Map<GlobalStreamId,Long>>();
    }
    this.acked.put(key, val);
  }

  public Map<String,Map<GlobalStreamId,Long>> getAcked() {
    return this.acked;
  }

  public BoltStats setAcked(Map<String,Map<GlobalStreamId,Long>> acked) {
    this.acked = acked;
    return this;
  }

  public void unsetAcked() {
    this.acked = null;
  }

  /** Returns true if field acked is set (has been assigned a value) and false otherwise */
  public boolean isSetAcked() {
    return this.acked != null;
  }

  public void setAckedIsSet(boolean value) {
    if (!value) {
      this.acked = null;
    }
  }

  public int getFailedSize() {
    return (this.failed == null) ? 0 : this.failed.size();
  }

  public void putToFailed(String key, Map<GlobalStreamId,Long> val) {
    if (this.failed == null) {
      this.failed = new HashMap<String,Map<GlobalStreamId,Long>>();
    }
    this.failed.put(key, val);
  }

  public Map<String,Map<GlobalStreamId,Long>> getFailed() {
    return this.failed;
  }

  public BoltStats setFailed(Map<String,Map<GlobalStreamId,Long>> failed) {
    this.failed = failed;
    return this;
  }

  public void unsetFailed() {
    this.failed = null;
  }

  /** Returns true if field failed is set (has been assigned a value) and false otherwise */
  public boolean isSetFailed() {
    return this.failed != null;
  }

  public void setFailedIsSet(boolean value) {
    if (!value) {
      this.failed = null;
    }
  }

  public int getProcess_ms_avgSize() {
    return (this.process_ms_avg == null) ? 0 : this.process_ms_avg.size();
  }

  public void putToProcess_ms_avg(String key, Map<GlobalStreamId,Double> val) {
    if (this.process_ms_avg == null) {
      this.process_ms_avg = new HashMap<String,Map<GlobalStreamId,Double>>();
    }
    this.process_ms_avg.put(key, val);
  }

  public Map<String,Map<GlobalStreamId,Double>> getProcess_ms_avg() {
    return this.process_ms_avg;
  }

  public BoltStats setProcess_ms_avg(Map<String,Map<GlobalStreamId,Double>> process_ms_avg) {
    this.process_ms_avg = process_ms_avg;
    return this;
  }

  public void unsetProcess_ms_avg() {
    this.process_ms_avg = null;
  }

  /** Returns true if field process_ms_avg is set (has been assigned a value) and false otherwise */
  public boolean isSetProcess_ms_avg() {
    return this.process_ms_avg != null;
  }

  public void setProcess_ms_avgIsSet(boolean value) {
    if (!value) {
      this.process_ms_avg = null;
    }
  }

  public int getExecutedSize() {
    return (this.executed == null) ? 0 : this.executed.size();
  }

  public void putToExecuted(String key, Map<GlobalStreamId,Long> val) {
    if (this.executed == null) {
      this.executed = new HashMap<String,Map<GlobalStreamId,Long>>();
    }
    this.executed.put(key, val);
  }

  public Map<String,Map<GlobalStreamId,Long>> getExecuted() {
    return this.executed;
  }

  public BoltStats setExecuted(Map<String,Map<GlobalStreamId,Long>> executed) {
    this.executed = executed;
    return this;
  }

  public void unsetExecuted() {
    this.executed = null;
  }

  /** Returns true if field executed is set (has been assigned a value) and false otherwise */
  public boolean isSetExecuted() {
    return this.executed != null;
  }

  public void setExecutedIsSet(boolean value) {
    if (!value) {
      this.executed = null;
    }
  }

  public int getExecute_ms_avgSize() {
    return (this.execute_ms_avg == null) ? 0 : this.execute_ms_avg.size();
  }

  public void putToExecute_ms_avg(String key, Map<GlobalStreamId,Double> val) {
    if (this.execute_ms_avg == null) {
      this.execute_ms_avg = new HashMap<String,Map<GlobalStreamId,Double>>();
    }
    this.execute_ms_avg.put(key, val);
  }

  public Map<String,Map<GlobalStreamId,Double>> getExecute_ms_avg() {
    return this.execute_ms_avg;
  }

  public BoltStats setExecute_ms_avg(Map<String,Map<GlobalStreamId,Double>> execute_ms_avg) {
    this.execute_ms_avg = execute_ms_avg;
    return this;
  }

  public void unsetExecute_ms_avg() {
    this.execute_ms_avg = null;
  }

  /** Returns true if field execute_ms_avg is set (has been assigned a value) and false otherwise */
  public boolean isSetExecute_ms_avg() {
    return this.execute_ms_avg != null;
  }

  public void setExecute_ms_avgIsSet(boolean value) {
    if (!value) {
      this.execute_ms_avg = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ACKED:
      if (value == null) {
        unsetAcked();
      } else {
        setAcked((Map<String,Map<GlobalStreamId,Long>>)value);
      }
      break;

    case FAILED:
      if (value == null) {
        unsetFailed();
      } else {
        setFailed((Map<String,Map<GlobalStreamId,Long>>)value);
      }
      break;

    case PROCESS_MS_AVG:
      if (value == null) {
        unsetProcess_ms_avg();
      } else {
        setProcess_ms_avg((Map<String,Map<GlobalStreamId,Double>>)value);
      }
      break;

    case EXECUTED:
      if (value == null) {
        unsetExecuted();
      } else {
        setExecuted((Map<String,Map<GlobalStreamId,Long>>)value);
      }
      break;

    case EXECUTE_MS_AVG:
      if (value == null) {
        unsetExecute_ms_avg();
      } else {
        setExecute_ms_avg((Map<String,Map<GlobalStreamId,Double>>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ACKED:
      return getAcked();

    case FAILED:
      return getFailed();

    case PROCESS_MS_AVG:
      return getProcess_ms_avg();

    case EXECUTED:
      return getExecuted();

    case EXECUTE_MS_AVG:
      return getExecute_ms_avg();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ACKED:
      return isSetAcked();
    case FAILED:
      return isSetFailed();
    case PROCESS_MS_AVG:
      return isSetProcess_ms_avg();
    case EXECUTED:
      return isSetExecuted();
    case EXECUTE_MS_AVG:
      return isSetExecute_ms_avg();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof BoltStats)
      return this.equals((BoltStats)that);
    return false;
  }

  public boolean equals(BoltStats that) {
    if (that == null)
      return false;

    boolean this_present_acked = true && this.isSetAcked();
    boolean that_present_acked = true && that.isSetAcked();
    if (this_present_acked || that_present_acked) {
      if (!(this_present_acked && that_present_acked))
        return false;
      if (!this.acked.equals(that.acked))
        return false;
    }

    boolean this_present_failed = true && this.isSetFailed();
    boolean that_present_failed = true && that.isSetFailed();
    if (this_present_failed || that_present_failed) {
      if (!(this_present_failed && that_present_failed))
        return false;
      if (!this.failed.equals(that.failed))
        return false;
    }

    boolean this_present_process_ms_avg = true && this.isSetProcess_ms_avg();
    boolean that_present_process_ms_avg = true && that.isSetProcess_ms_avg();
    if (this_present_process_ms_avg || that_present_process_ms_avg) {
      if (!(this_present_process_ms_avg && that_present_process_ms_avg))
        return false;
      if (!this.process_ms_avg.equals(that.process_ms_avg))
        return false;
    }

    boolean this_present_executed = true && this.isSetExecuted();
    boolean that_present_executed = true && that.isSetExecuted();
    if (this_present_executed || that_present_executed) {
      if (!(this_present_executed && that_present_executed))
        return false;
      if (!this.executed.equals(that.executed))
        return false;
    }

    boolean this_present_execute_ms_avg = true && this.isSetExecute_ms_avg();
    boolean that_present_execute_ms_avg = true && that.isSetExecute_ms_avg();
    if (this_present_execute_ms_avg || that_present_execute_ms_avg) {
      if (!(this_present_execute_ms_avg && that_present_execute_ms_avg))
        return false;
      if (!this.execute_ms_avg.equals(that.execute_ms_avg))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(BoltStats other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    BoltStats typedOther = (BoltStats)other;

    lastComparison = Boolean.valueOf(isSetAcked()).compareTo(typedOther.isSetAcked());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAcked()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.acked, typedOther.acked);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFailed()).compareTo(typedOther.isSetFailed());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFailed()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.failed, typedOther.failed);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProcess_ms_avg()).compareTo(typedOther.isSetProcess_ms_avg());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProcess_ms_avg()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.process_ms_avg, typedOther.process_ms_avg);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExecuted()).compareTo(typedOther.isSetExecuted());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExecuted()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.executed, typedOther.executed);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExecute_ms_avg()).compareTo(typedOther.isSetExecute_ms_avg());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExecute_ms_avg()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.execute_ms_avg, typedOther.execute_ms_avg);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("BoltStats(");
    boolean first = true;

    sb.append("acked:");
    if (this.acked == null) {
      sb.append("null");
    } else {
      sb.append(this.acked);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("failed:");
    if (this.failed == null) {
      sb.append("null");
    } else {
      sb.append(this.failed);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("process_ms_avg:");
    if (this.process_ms_avg == null) {
      sb.append("null");
    } else {
      sb.append(this.process_ms_avg);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("executed:");
    if (this.executed == null) {
      sb.append("null");
    } else {
      sb.append(this.executed);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("execute_ms_avg:");
    if (this.execute_ms_avg == null) {
      sb.append("null");
    } else {
      sb.append(this.execute_ms_avg);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (acked == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'acked' was not present! Struct: " + toString());
    }
    if (failed == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'failed' was not present! Struct: " + toString());
    }
    if (process_ms_avg == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'process_ms_avg' was not present! Struct: " + toString());
    }
    if (executed == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'executed' was not present! Struct: " + toString());
    }
    if (execute_ms_avg == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'execute_ms_avg' was not present! Struct: " + toString());
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class BoltStatsStandardSchemeFactory implements SchemeFactory {
    public BoltStatsStandardScheme getScheme() {
      return new BoltStatsStandardScheme();
    }
  }

  private static class BoltStatsStandardScheme extends StandardScheme<BoltStats> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, BoltStats struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ACKED
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map132 = iprot.readMapBegin();
                struct.acked = new HashMap<String,Map<GlobalStreamId,Long>>(2*_map132.size);
                for (int _i133 = 0; _i133 < _map132.size; ++_i133)
                {
                  String _key134; // required
                  Map<GlobalStreamId,Long> _val135; // required
                  _key134 = iprot.readString();
                  {
                    org.apache.thrift.protocol.TMap _map136 = iprot.readMapBegin();
                    _val135 = new HashMap<GlobalStreamId,Long>(2*_map136.size);
                    for (int _i137 = 0; _i137 < _map136.size; ++_i137)
                    {
                      GlobalStreamId _key138; // required
                      long _val139; // required
                      _key138 = new GlobalStreamId();
                      _key138.read(iprot);
                      _val139 = iprot.readI64();
                      _val135.put(_key138, _val139);
                    }
                    iprot.readMapEnd();
                  }
                  struct.acked.put(_key134, _val135);
                }
                iprot.readMapEnd();
              }
              struct.setAckedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // FAILED
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map140 = iprot.readMapBegin();
                struct.failed = new HashMap<String,Map<GlobalStreamId,Long>>(2*_map140.size);
                for (int _i141 = 0; _i141 < _map140.size; ++_i141)
                {
                  String _key142; // required
                  Map<GlobalStreamId,Long> _val143; // required
                  _key142 = iprot.readString();
                  {
                    org.apache.thrift.protocol.TMap _map144 = iprot.readMapBegin();
                    _val143 = new HashMap<GlobalStreamId,Long>(2*_map144.size);
                    for (int _i145 = 0; _i145 < _map144.size; ++_i145)
                    {
                      GlobalStreamId _key146; // required
                      long _val147; // required
                      _key146 = new GlobalStreamId();
                      _key146.read(iprot);
                      _val147 = iprot.readI64();
                      _val143.put(_key146, _val147);
                    }
                    iprot.readMapEnd();
                  }
                  struct.failed.put(_key142, _val143);
                }
                iprot.readMapEnd();
              }
              struct.setFailedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // PROCESS_MS_AVG
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map148 = iprot.readMapBegin();
                struct.process_ms_avg = new HashMap<String,Map<GlobalStreamId,Double>>(2*_map148.size);
                for (int _i149 = 0; _i149 < _map148.size; ++_i149)
                {
                  String _key150; // required
                  Map<GlobalStreamId,Double> _val151; // required
                  _key150 = iprot.readString();
                  {
                    org.apache.thrift.protocol.TMap _map152 = iprot.readMapBegin();
                    _val151 = new HashMap<GlobalStreamId,Double>(2*_map152.size);
                    for (int _i153 = 0; _i153 < _map152.size; ++_i153)
                    {
                      GlobalStreamId _key154; // required
                      double _val155; // required
                      _key154 = new GlobalStreamId();
                      _key154.read(iprot);
                      _val155 = iprot.readDouble();
                      _val151.put(_key154, _val155);
                    }
                    iprot.readMapEnd();
                  }
                  struct.process_ms_avg.put(_key150, _val151);
                }
                iprot.readMapEnd();
              }
              struct.setProcess_ms_avgIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // EXECUTED
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map156 = iprot.readMapBegin();
                struct.executed = new HashMap<String,Map<GlobalStreamId,Long>>(2*_map156.size);
                for (int _i157 = 0; _i157 < _map156.size; ++_i157)
                {
                  String _key158; // required
                  Map<GlobalStreamId,Long> _val159; // required
                  _key158 = iprot.readString();
                  {
                    org.apache.thrift.protocol.TMap _map160 = iprot.readMapBegin();
                    _val159 = new HashMap<GlobalStreamId,Long>(2*_map160.size);
                    for (int _i161 = 0; _i161 < _map160.size; ++_i161)
                    {
                      GlobalStreamId _key162; // required
                      long _val163; // required
                      _key162 = new GlobalStreamId();
                      _key162.read(iprot);
                      _val163 = iprot.readI64();
                      _val159.put(_key162, _val163);
                    }
                    iprot.readMapEnd();
                  }
                  struct.executed.put(_key158, _val159);
                }
                iprot.readMapEnd();
              }
              struct.setExecutedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // EXECUTE_MS_AVG
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map164 = iprot.readMapBegin();
                struct.execute_ms_avg = new HashMap<String,Map<GlobalStreamId,Double>>(2*_map164.size);
                for (int _i165 = 0; _i165 < _map164.size; ++_i165)
                {
                  String _key166; // required
                  Map<GlobalStreamId,Double> _val167; // required
                  _key166 = iprot.readString();
                  {
                    org.apache.thrift.protocol.TMap _map168 = iprot.readMapBegin();
                    _val167 = new HashMap<GlobalStreamId,Double>(2*_map168.size);
                    for (int _i169 = 0; _i169 < _map168.size; ++_i169)
                    {
                      GlobalStreamId _key170; // required
                      double _val171; // required
                      _key170 = new GlobalStreamId();
                      _key170.read(iprot);
                      _val171 = iprot.readDouble();
                      _val167.put(_key170, _val171);
                    }
                    iprot.readMapEnd();
                  }
                  struct.execute_ms_avg.put(_key166, _val167);
                }
                iprot.readMapEnd();
              }
              struct.setExecute_ms_avgIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, BoltStats struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.acked != null) {
        oprot.writeFieldBegin(ACKED_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.MAP, struct.acked.size()));
          for (Map.Entry<String, Map<GlobalStreamId,Long>> _iter172 : struct.acked.entrySet())
          {
            oprot.writeString(_iter172.getKey());
            {
              oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRUCT, org.apache.thrift.protocol.TType.I64, _iter172.getValue().size()));
              for (Map.Entry<GlobalStreamId, Long> _iter173 : _iter172.getValue().entrySet())
              {
                _iter173.getKey().write(oprot);
                oprot.writeI64(_iter173.getValue());
              }
              oprot.writeMapEnd();
            }
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.failed != null) {
        oprot.writeFieldBegin(FAILED_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.MAP, struct.failed.size()));
          for (Map.Entry<String, Map<GlobalStreamId,Long>> _iter174 : struct.failed.entrySet())
          {
            oprot.writeString(_iter174.getKey());
            {
              oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRUCT, org.apache.thrift.protocol.TType.I64, _iter174.getValue().size()));
              for (Map.Entry<GlobalStreamId, Long> _iter175 : _iter174.getValue().entrySet())
              {
                _iter175.getKey().write(oprot);
                oprot.writeI64(_iter175.getValue());
              }
              oprot.writeMapEnd();
            }
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.process_ms_avg != null) {
        oprot.writeFieldBegin(PROCESS_MS_AVG_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.MAP, struct.process_ms_avg.size()));
          for (Map.Entry<String, Map<GlobalStreamId,Double>> _iter176 : struct.process_ms_avg.entrySet())
          {
            oprot.writeString(_iter176.getKey());
            {
              oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRUCT, org.apache.thrift.protocol.TType.DOUBLE, _iter176.getValue().size()));
              for (Map.Entry<GlobalStreamId, Double> _iter177 : _iter176.getValue().entrySet())
              {
                _iter177.getKey().write(oprot);
                oprot.writeDouble(_iter177.getValue());
              }
              oprot.writeMapEnd();
            }
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.executed != null) {
        oprot.writeFieldBegin(EXECUTED_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.MAP, struct.executed.size()));
          for (Map.Entry<String, Map<GlobalStreamId,Long>> _iter178 : struct.executed.entrySet())
          {
            oprot.writeString(_iter178.getKey());
            {
              oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRUCT, org.apache.thrift.protocol.TType.I64, _iter178.getValue().size()));
              for (Map.Entry<GlobalStreamId, Long> _iter179 : _iter178.getValue().entrySet())
              {
                _iter179.getKey().write(oprot);
                oprot.writeI64(_iter179.getValue());
              }
              oprot.writeMapEnd();
            }
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.execute_ms_avg != null) {
        oprot.writeFieldBegin(EXECUTE_MS_AVG_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.MAP, struct.execute_ms_avg.size()));
          for (Map.Entry<String, Map<GlobalStreamId,Double>> _iter180 : struct.execute_ms_avg.entrySet())
          {
            oprot.writeString(_iter180.getKey());
            {
              oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRUCT, org.apache.thrift.protocol.TType.DOUBLE, _iter180.getValue().size()));
              for (Map.Entry<GlobalStreamId, Double> _iter181 : _iter180.getValue().entrySet())
              {
                _iter181.getKey().write(oprot);
                oprot.writeDouble(_iter181.getValue());
              }
              oprot.writeMapEnd();
            }
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class BoltStatsTupleSchemeFactory implements SchemeFactory {
    public BoltStatsTupleScheme getScheme() {
      return new BoltStatsTupleScheme();
    }
  }

  private static class BoltStatsTupleScheme extends TupleScheme<BoltStats> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, BoltStats struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      {
        oprot.writeI32(struct.acked.size());
        for (Map.Entry<String, Map<GlobalStreamId,Long>> _iter182 : struct.acked.entrySet())
        {
          oprot.writeString(_iter182.getKey());
          {
            oprot.writeI32(_iter182.getValue().size());
            for (Map.Entry<GlobalStreamId, Long> _iter183 : _iter182.getValue().entrySet())
            {
              _iter183.getKey().write(oprot);
              oprot.writeI64(_iter183.getValue());
            }
          }
        }
      }
      {
        oprot.writeI32(struct.failed.size());
        for (Map.Entry<String, Map<GlobalStreamId,Long>> _iter184 : struct.failed.entrySet())
        {
          oprot.writeString(_iter184.getKey());
          {
            oprot.writeI32(_iter184.getValue().size());
            for (Map.Entry<GlobalStreamId, Long> _iter185 : _iter184.getValue().entrySet())
            {
              _iter185.getKey().write(oprot);
              oprot.writeI64(_iter185.getValue());
            }
          }
        }
      }
      {
        oprot.writeI32(struct.process_ms_avg.size());
        for (Map.Entry<String, Map<GlobalStreamId,Double>> _iter186 : struct.process_ms_avg.entrySet())
        {
          oprot.writeString(_iter186.getKey());
          {
            oprot.writeI32(_iter186.getValue().size());
            for (Map.Entry<GlobalStreamId, Double> _iter187 : _iter186.getValue().entrySet())
            {
              _iter187.getKey().write(oprot);
              oprot.writeDouble(_iter187.getValue());
            }
          }
        }
      }
      {
        oprot.writeI32(struct.executed.size());
        for (Map.Entry<String, Map<GlobalStreamId,Long>> _iter188 : struct.executed.entrySet())
        {
          oprot.writeString(_iter188.getKey());
          {
            oprot.writeI32(_iter188.getValue().size());
            for (Map.Entry<GlobalStreamId, Long> _iter189 : _iter188.getValue().entrySet())
            {
              _iter189.getKey().write(oprot);
              oprot.writeI64(_iter189.getValue());
            }
          }
        }
      }
      {
        oprot.writeI32(struct.execute_ms_avg.size());
        for (Map.Entry<String, Map<GlobalStreamId,Double>> _iter190 : struct.execute_ms_avg.entrySet())
        {
          oprot.writeString(_iter190.getKey());
          {
            oprot.writeI32(_iter190.getValue().size());
            for (Map.Entry<GlobalStreamId, Double> _iter191 : _iter190.getValue().entrySet())
            {
              _iter191.getKey().write(oprot);
              oprot.writeDouble(_iter191.getValue());
            }
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, BoltStats struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      {
        org.apache.thrift.protocol.TMap _map192 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.MAP, iprot.readI32());
        struct.acked = new HashMap<String,Map<GlobalStreamId,Long>>(2*_map192.size);
        for (int _i193 = 0; _i193 < _map192.size; ++_i193)
        {
          String _key194; // required
          Map<GlobalStreamId,Long> _val195; // required
          _key194 = iprot.readString();
          {
            org.apache.thrift.protocol.TMap _map196 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRUCT, org.apache.thrift.protocol.TType.I64, iprot.readI32());
            _val195 = new HashMap<GlobalStreamId,Long>(2*_map196.size);
            for (int _i197 = 0; _i197 < _map196.size; ++_i197)
            {
              GlobalStreamId _key198; // required
              long _val199; // required
              _key198 = new GlobalStreamId();
              _key198.read(iprot);
              _val199 = iprot.readI64();
              _val195.put(_key198, _val199);
            }
          }
          struct.acked.put(_key194, _val195);
        }
      }
      struct.setAckedIsSet(true);
      {
        org.apache.thrift.protocol.TMap _map200 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.MAP, iprot.readI32());
        struct.failed = new HashMap<String,Map<GlobalStreamId,Long>>(2*_map200.size);
        for (int _i201 = 0; _i201 < _map200.size; ++_i201)
        {
          String _key202; // required
          Map<GlobalStreamId,Long> _val203; // required
          _key202 = iprot.readString();
          {
            org.apache.thrift.protocol.TMap _map204 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRUCT, org.apache.thrift.protocol.TType.I64, iprot.readI32());
            _val203 = new HashMap<GlobalStreamId,Long>(2*_map204.size);
            for (int _i205 = 0; _i205 < _map204.size; ++_i205)
            {
              GlobalStreamId _key206; // required
              long _val207; // required
              _key206 = new GlobalStreamId();
              _key206.read(iprot);
              _val207 = iprot.readI64();
              _val203.put(_key206, _val207);
            }
          }
          struct.failed.put(_key202, _val203);
        }
      }
      struct.setFailedIsSet(true);
      {
        org.apache.thrift.protocol.TMap _map208 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.MAP, iprot.readI32());
        struct.process_ms_avg = new HashMap<String,Map<GlobalStreamId,Double>>(2*_map208.size);
        for (int _i209 = 0; _i209 < _map208.size; ++_i209)
        {
          String _key210; // required
          Map<GlobalStreamId,Double> _val211; // required
          _key210 = iprot.readString();
          {
            org.apache.thrift.protocol.TMap _map212 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRUCT, org.apache.thrift.protocol.TType.DOUBLE, iprot.readI32());
            _val211 = new HashMap<GlobalStreamId,Double>(2*_map212.size);
            for (int _i213 = 0; _i213 < _map212.size; ++_i213)
            {
              GlobalStreamId _key214; // required
              double _val215; // required
              _key214 = new GlobalStreamId();
              _key214.read(iprot);
              _val215 = iprot.readDouble();
              _val211.put(_key214, _val215);
            }
          }
          struct.process_ms_avg.put(_key210, _val211);
        }
      }
      struct.setProcess_ms_avgIsSet(true);
      {
        org.apache.thrift.protocol.TMap _map216 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.MAP, iprot.readI32());
        struct.executed = new HashMap<String,Map<GlobalStreamId,Long>>(2*_map216.size);
        for (int _i217 = 0; _i217 < _map216.size; ++_i217)
        {
          String _key218; // required
          Map<GlobalStreamId,Long> _val219; // required
          _key218 = iprot.readString();
          {
            org.apache.thrift.protocol.TMap _map220 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRUCT, org.apache.thrift.protocol.TType.I64, iprot.readI32());
            _val219 = new HashMap<GlobalStreamId,Long>(2*_map220.size);
            for (int _i221 = 0; _i221 < _map220.size; ++_i221)
            {
              GlobalStreamId _key222; // required
              long _val223; // required
              _key222 = new GlobalStreamId();
              _key222.read(iprot);
              _val223 = iprot.readI64();
              _val219.put(_key222, _val223);
            }
          }
          struct.executed.put(_key218, _val219);
        }
      }
      struct.setExecutedIsSet(true);
      {
        org.apache.thrift.protocol.TMap _map224 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.MAP, iprot.readI32());
        struct.execute_ms_avg = new HashMap<String,Map<GlobalStreamId,Double>>(2*_map224.size);
        for (int _i225 = 0; _i225 < _map224.size; ++_i225)
        {
          String _key226; // required
          Map<GlobalStreamId,Double> _val227; // required
          _key226 = iprot.readString();
          {
            org.apache.thrift.protocol.TMap _map228 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRUCT, org.apache.thrift.protocol.TType.DOUBLE, iprot.readI32());
            _val227 = new HashMap<GlobalStreamId,Double>(2*_map228.size);
            for (int _i229 = 0; _i229 < _map228.size; ++_i229)
            {
              GlobalStreamId _key230; // required
              double _val231; // required
              _key230 = new GlobalStreamId();
              _key230.read(iprot);
              _val231 = iprot.readDouble();
              _val227.put(_key230, _val231);
            }
          }
          struct.execute_ms_avg.put(_key226, _val227);
        }
      }
      struct.setExecute_ms_avgIsSet(true);
    }
  }

}

