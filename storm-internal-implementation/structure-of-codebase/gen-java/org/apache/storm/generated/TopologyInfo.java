/**
 * Autogenerated by Thrift Compiler (0.8.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.apache.storm.generated;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class TopologyInfo implements org.apache.thrift.TBase<TopologyInfo, TopologyInfo._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TopologyInfo");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField UPTIME_SECS_FIELD_DESC = new org.apache.thrift.protocol.TField("uptime_secs", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField EXECUTORS_FIELD_DESC = new org.apache.thrift.protocol.TField("executors", org.apache.thrift.protocol.TType.LIST, (short)4);
  private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("status", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField ERRORS_FIELD_DESC = new org.apache.thrift.protocol.TField("errors", org.apache.thrift.protocol.TType.MAP, (short)6);
  private static final org.apache.thrift.protocol.TField COMPONENT_DEBUG_FIELD_DESC = new org.apache.thrift.protocol.TField("component_debug", org.apache.thrift.protocol.TType.MAP, (short)7);
  private static final org.apache.thrift.protocol.TField SCHED_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("sched_status", org.apache.thrift.protocol.TType.STRING, (short)513);
  private static final org.apache.thrift.protocol.TField OWNER_FIELD_DESC = new org.apache.thrift.protocol.TField("owner", org.apache.thrift.protocol.TType.STRING, (short)514);
  private static final org.apache.thrift.protocol.TField REPLICATION_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("replication_count", org.apache.thrift.protocol.TType.I32, (short)515);
  private static final org.apache.thrift.protocol.TField REQUESTED_MEMONHEAP_FIELD_DESC = new org.apache.thrift.protocol.TField("requested_memonheap", org.apache.thrift.protocol.TType.DOUBLE, (short)521);
  private static final org.apache.thrift.protocol.TField REQUESTED_MEMOFFHEAP_FIELD_DESC = new org.apache.thrift.protocol.TField("requested_memoffheap", org.apache.thrift.protocol.TType.DOUBLE, (short)522);
  private static final org.apache.thrift.protocol.TField REQUESTED_CPU_FIELD_DESC = new org.apache.thrift.protocol.TField("requested_cpu", org.apache.thrift.protocol.TType.DOUBLE, (short)523);
  private static final org.apache.thrift.protocol.TField ASSIGNED_MEMONHEAP_FIELD_DESC = new org.apache.thrift.protocol.TField("assigned_memonheap", org.apache.thrift.protocol.TType.DOUBLE, (short)524);
  private static final org.apache.thrift.protocol.TField ASSIGNED_MEMOFFHEAP_FIELD_DESC = new org.apache.thrift.protocol.TField("assigned_memoffheap", org.apache.thrift.protocol.TType.DOUBLE, (short)525);
  private static final org.apache.thrift.protocol.TField ASSIGNED_CPU_FIELD_DESC = new org.apache.thrift.protocol.TField("assigned_cpu", org.apache.thrift.protocol.TType.DOUBLE, (short)526);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TopologyInfoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TopologyInfoTupleSchemeFactory());
  }

  public String id; // required
  public String name; // required
  public int uptime_secs; // required
  public List<ExecutorSummary> executors; // required
  public String status; // required
  public Map<String,List<ErrorInfo>> errors; // required
  public Map<String,DebugOptions> component_debug; // required
  public String sched_status; // required
  public String owner; // required
  public int replication_count; // required
  public double requested_memonheap; // required
  public double requested_memoffheap; // required
  public double requested_cpu; // required
  public double assigned_memonheap; // required
  public double assigned_memoffheap; // required
  public double assigned_cpu; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    NAME((short)2, "name"),
    UPTIME_SECS((short)3, "uptime_secs"),
    EXECUTORS((short)4, "executors"),
    STATUS((short)5, "status"),
    ERRORS((short)6, "errors"),
    COMPONENT_DEBUG((short)7, "component_debug"),
    SCHED_STATUS((short)513, "sched_status"),
    OWNER((short)514, "owner"),
    REPLICATION_COUNT((short)515, "replication_count"),
    REQUESTED_MEMONHEAP((short)521, "requested_memonheap"),
    REQUESTED_MEMOFFHEAP((short)522, "requested_memoffheap"),
    REQUESTED_CPU((short)523, "requested_cpu"),
    ASSIGNED_MEMONHEAP((short)524, "assigned_memonheap"),
    ASSIGNED_MEMOFFHEAP((short)525, "assigned_memoffheap"),
    ASSIGNED_CPU((short)526, "assigned_cpu");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // NAME
          return NAME;
        case 3: // UPTIME_SECS
          return UPTIME_SECS;
        case 4: // EXECUTORS
          return EXECUTORS;
        case 5: // STATUS
          return STATUS;
        case 6: // ERRORS
          return ERRORS;
        case 7: // COMPONENT_DEBUG
          return COMPONENT_DEBUG;
        case 513: // SCHED_STATUS
          return SCHED_STATUS;
        case 514: // OWNER
          return OWNER;
        case 515: // REPLICATION_COUNT
          return REPLICATION_COUNT;
        case 521: // REQUESTED_MEMONHEAP
          return REQUESTED_MEMONHEAP;
        case 522: // REQUESTED_MEMOFFHEAP
          return REQUESTED_MEMOFFHEAP;
        case 523: // REQUESTED_CPU
          return REQUESTED_CPU;
        case 524: // ASSIGNED_MEMONHEAP
          return ASSIGNED_MEMONHEAP;
        case 525: // ASSIGNED_MEMOFFHEAP
          return ASSIGNED_MEMOFFHEAP;
        case 526: // ASSIGNED_CPU
          return ASSIGNED_CPU;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __UPTIME_SECS_ISSET_ID = 0;
  private static final int __REPLICATION_COUNT_ISSET_ID = 1;
  private static final int __REQUESTED_MEMONHEAP_ISSET_ID = 2;
  private static final int __REQUESTED_MEMOFFHEAP_ISSET_ID = 3;
  private static final int __REQUESTED_CPU_ISSET_ID = 4;
  private static final int __ASSIGNED_MEMONHEAP_ISSET_ID = 5;
  private static final int __ASSIGNED_MEMOFFHEAP_ISSET_ID = 6;
  private static final int __ASSIGNED_CPU_ISSET_ID = 7;
  private BitSet __isset_bit_vector = new BitSet(8);
  private _Fields optionals[] = {_Fields.COMPONENT_DEBUG,_Fields.SCHED_STATUS,_Fields.OWNER,_Fields.REPLICATION_COUNT,_Fields.REQUESTED_MEMONHEAP,_Fields.REQUESTED_MEMOFFHEAP,_Fields.REQUESTED_CPU,_Fields.ASSIGNED_MEMONHEAP,_Fields.ASSIGNED_MEMOFFHEAP,_Fields.ASSIGNED_CPU};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.UPTIME_SECS, new org.apache.thrift.meta_data.FieldMetaData("uptime_secs", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.EXECUTORS, new org.apache.thrift.meta_data.FieldMetaData("executors", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ExecutorSummary.class))));
    tmpMap.put(_Fields.STATUS, new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ERRORS, new org.apache.thrift.meta_data.FieldMetaData("errors", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
                new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ErrorInfo.class)))));
    tmpMap.put(_Fields.COMPONENT_DEBUG, new org.apache.thrift.meta_data.FieldMetaData("component_debug", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, DebugOptions.class))));
    tmpMap.put(_Fields.SCHED_STATUS, new org.apache.thrift.meta_data.FieldMetaData("sched_status", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.OWNER, new org.apache.thrift.meta_data.FieldMetaData("owner", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REPLICATION_COUNT, new org.apache.thrift.meta_data.FieldMetaData("replication_count", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.REQUESTED_MEMONHEAP, new org.apache.thrift.meta_data.FieldMetaData("requested_memonheap", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.REQUESTED_MEMOFFHEAP, new org.apache.thrift.meta_data.FieldMetaData("requested_memoffheap", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.REQUESTED_CPU, new org.apache.thrift.meta_data.FieldMetaData("requested_cpu", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.ASSIGNED_MEMONHEAP, new org.apache.thrift.meta_data.FieldMetaData("assigned_memonheap", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.ASSIGNED_MEMOFFHEAP, new org.apache.thrift.meta_data.FieldMetaData("assigned_memoffheap", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.ASSIGNED_CPU, new org.apache.thrift.meta_data.FieldMetaData("assigned_cpu", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TopologyInfo.class, metaDataMap);
  }

  public TopologyInfo() {
  }

  public TopologyInfo(
    String id,
    String name,
    int uptime_secs,
    List<ExecutorSummary> executors,
    String status,
    Map<String,List<ErrorInfo>> errors)
  {
    this();
    this.id = id;
    this.name = name;
    this.uptime_secs = uptime_secs;
    setUptime_secsIsSet(true);
    this.executors = executors;
    this.status = status;
    this.errors = errors;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TopologyInfo(TopologyInfo other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    if (other.isSetId()) {
      this.id = other.id;
    }
    if (other.isSetName()) {
      this.name = other.name;
    }
    this.uptime_secs = other.uptime_secs;
    if (other.isSetExecutors()) {
      List<ExecutorSummary> __this__executors = new ArrayList<ExecutorSummary>();
      for (ExecutorSummary other_element : other.executors) {
        __this__executors.add(new ExecutorSummary(other_element));
      }
      this.executors = __this__executors;
    }
    if (other.isSetStatus()) {
      this.status = other.status;
    }
    if (other.isSetErrors()) {
      Map<String,List<ErrorInfo>> __this__errors = new HashMap<String,List<ErrorInfo>>();
      for (Map.Entry<String, List<ErrorInfo>> other_element : other.errors.entrySet()) {

        String other_element_key = other_element.getKey();
        List<ErrorInfo> other_element_value = other_element.getValue();

        String __this__errors_copy_key = other_element_key;

        List<ErrorInfo> __this__errors_copy_value = new ArrayList<ErrorInfo>();
        for (ErrorInfo other_element_value_element : other_element_value) {
          __this__errors_copy_value.add(new ErrorInfo(other_element_value_element));
        }

        __this__errors.put(__this__errors_copy_key, __this__errors_copy_value);
      }
      this.errors = __this__errors;
    }
    if (other.isSetComponent_debug()) {
      Map<String,DebugOptions> __this__component_debug = new HashMap<String,DebugOptions>();
      for (Map.Entry<String, DebugOptions> other_element : other.component_debug.entrySet()) {

        String other_element_key = other_element.getKey();
        DebugOptions other_element_value = other_element.getValue();

        String __this__component_debug_copy_key = other_element_key;

        DebugOptions __this__component_debug_copy_value = new DebugOptions(other_element_value);

        __this__component_debug.put(__this__component_debug_copy_key, __this__component_debug_copy_value);
      }
      this.component_debug = __this__component_debug;
    }
    if (other.isSetSched_status()) {
      this.sched_status = other.sched_status;
    }
    if (other.isSetOwner()) {
      this.owner = other.owner;
    }
    this.replication_count = other.replication_count;
    this.requested_memonheap = other.requested_memonheap;
    this.requested_memoffheap = other.requested_memoffheap;
    this.requested_cpu = other.requested_cpu;
    this.assigned_memonheap = other.assigned_memonheap;
    this.assigned_memoffheap = other.assigned_memoffheap;
    this.assigned_cpu = other.assigned_cpu;
  }

  public TopologyInfo deepCopy() {
    return new TopologyInfo(this);
  }

  @Override
  public void clear() {
    this.id = null;
    this.name = null;
    setUptime_secsIsSet(false);
    this.uptime_secs = 0;
    this.executors = null;
    this.status = null;
    this.errors = null;
    this.component_debug = null;
    this.sched_status = null;
    this.owner = null;
    setReplication_countIsSet(false);
    this.replication_count = 0;
    setRequested_memonheapIsSet(false);
    this.requested_memonheap = 0.0;
    setRequested_memoffheapIsSet(false);
    this.requested_memoffheap = 0.0;
    setRequested_cpuIsSet(false);
    this.requested_cpu = 0.0;
    setAssigned_memonheapIsSet(false);
    this.assigned_memonheap = 0.0;
    setAssigned_memoffheapIsSet(false);
    this.assigned_memoffheap = 0.0;
    setAssigned_cpuIsSet(false);
    this.assigned_cpu = 0.0;
  }

  public String getId() {
    return this.id;
  }

  public TopologyInfo setId(String id) {
    this.id = id;
    return this;
  }

  public void unsetId() {
    this.id = null;
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return this.id != null;
  }

  public void setIdIsSet(boolean value) {
    if (!value) {
      this.id = null;
    }
  }

  public String getName() {
    return this.name;
  }

  public TopologyInfo setName(String name) {
    this.name = name;
    return this;
  }

  public void unsetName() {
    this.name = null;
  }

  /** Returns true if field name is set (has been assigned a value) and false otherwise */
  public boolean isSetName() {
    return this.name != null;
  }

  public void setNameIsSet(boolean value) {
    if (!value) {
      this.name = null;
    }
  }

  public int getUptime_secs() {
    return this.uptime_secs;
  }

  public TopologyInfo setUptime_secs(int uptime_secs) {
    this.uptime_secs = uptime_secs;
    setUptime_secsIsSet(true);
    return this;
  }

  public void unsetUptime_secs() {
    __isset_bit_vector.clear(__UPTIME_SECS_ISSET_ID);
  }

  /** Returns true if field uptime_secs is set (has been assigned a value) and false otherwise */
  public boolean isSetUptime_secs() {
    return __isset_bit_vector.get(__UPTIME_SECS_ISSET_ID);
  }

  public void setUptime_secsIsSet(boolean value) {
    __isset_bit_vector.set(__UPTIME_SECS_ISSET_ID, value);
  }

  public int getExecutorsSize() {
    return (this.executors == null) ? 0 : this.executors.size();
  }

  public java.util.Iterator<ExecutorSummary> getExecutorsIterator() {
    return (this.executors == null) ? null : this.executors.iterator();
  }

  public void addToExecutors(ExecutorSummary elem) {
    if (this.executors == null) {
      this.executors = new ArrayList<ExecutorSummary>();
    }
    this.executors.add(elem);
  }

  public List<ExecutorSummary> getExecutors() {
    return this.executors;
  }

  public TopologyInfo setExecutors(List<ExecutorSummary> executors) {
    this.executors = executors;
    return this;
  }

  public void unsetExecutors() {
    this.executors = null;
  }

  /** Returns true if field executors is set (has been assigned a value) and false otherwise */
  public boolean isSetExecutors() {
    return this.executors != null;
  }

  public void setExecutorsIsSet(boolean value) {
    if (!value) {
      this.executors = null;
    }
  }

  public String getStatus() {
    return this.status;
  }

  public TopologyInfo setStatus(String status) {
    this.status = status;
    return this;
  }

  public void unsetStatus() {
    this.status = null;
  }

  /** Returns true if field status is set (has been assigned a value) and false otherwise */
  public boolean isSetStatus() {
    return this.status != null;
  }

  public void setStatusIsSet(boolean value) {
    if (!value) {
      this.status = null;
    }
  }

  public int getErrorsSize() {
    return (this.errors == null) ? 0 : this.errors.size();
  }

  public void putToErrors(String key, List<ErrorInfo> val) {
    if (this.errors == null) {
      this.errors = new HashMap<String,List<ErrorInfo>>();
    }
    this.errors.put(key, val);
  }

  public Map<String,List<ErrorInfo>> getErrors() {
    return this.errors;
  }

  public TopologyInfo setErrors(Map<String,List<ErrorInfo>> errors) {
    this.errors = errors;
    return this;
  }

  public void unsetErrors() {
    this.errors = null;
  }

  /** Returns true if field errors is set (has been assigned a value) and false otherwise */
  public boolean isSetErrors() {
    return this.errors != null;
  }

  public void setErrorsIsSet(boolean value) {
    if (!value) {
      this.errors = null;
    }
  }

  public int getComponent_debugSize() {
    return (this.component_debug == null) ? 0 : this.component_debug.size();
  }

  public void putToComponent_debug(String key, DebugOptions val) {
    if (this.component_debug == null) {
      this.component_debug = new HashMap<String,DebugOptions>();
    }
    this.component_debug.put(key, val);
  }

  public Map<String,DebugOptions> getComponent_debug() {
    return this.component_debug;
  }

  public TopologyInfo setComponent_debug(Map<String,DebugOptions> component_debug) {
    this.component_debug = component_debug;
    return this;
  }

  public void unsetComponent_debug() {
    this.component_debug = null;
  }

  /** Returns true if field component_debug is set (has been assigned a value) and false otherwise */
  public boolean isSetComponent_debug() {
    return this.component_debug != null;
  }

  public void setComponent_debugIsSet(boolean value) {
    if (!value) {
      this.component_debug = null;
    }
  }

  public String getSched_status() {
    return this.sched_status;
  }

  public TopologyInfo setSched_status(String sched_status) {
    this.sched_status = sched_status;
    return this;
  }

  public void unsetSched_status() {
    this.sched_status = null;
  }

  /** Returns true if field sched_status is set (has been assigned a value) and false otherwise */
  public boolean isSetSched_status() {
    return this.sched_status != null;
  }

  public void setSched_statusIsSet(boolean value) {
    if (!value) {
      this.sched_status = null;
    }
  }

  public String getOwner() {
    return this.owner;
  }

  public TopologyInfo setOwner(String owner) {
    this.owner = owner;
    return this;
  }

  public void unsetOwner() {
    this.owner = null;
  }

  /** Returns true if field owner is set (has been assigned a value) and false otherwise */
  public boolean isSetOwner() {
    return this.owner != null;
  }

  public void setOwnerIsSet(boolean value) {
    if (!value) {
      this.owner = null;
    }
  }

  public int getReplication_count() {
    return this.replication_count;
  }

  public TopologyInfo setReplication_count(int replication_count) {
    this.replication_count = replication_count;
    setReplication_countIsSet(true);
    return this;
  }

  public void unsetReplication_count() {
    __isset_bit_vector.clear(__REPLICATION_COUNT_ISSET_ID);
  }

  /** Returns true if field replication_count is set (has been assigned a value) and false otherwise */
  public boolean isSetReplication_count() {
    return __isset_bit_vector.get(__REPLICATION_COUNT_ISSET_ID);
  }

  public void setReplication_countIsSet(boolean value) {
    __isset_bit_vector.set(__REPLICATION_COUNT_ISSET_ID, value);
  }

  public double getRequested_memonheap() {
    return this.requested_memonheap;
  }

  public TopologyInfo setRequested_memonheap(double requested_memonheap) {
    this.requested_memonheap = requested_memonheap;
    setRequested_memonheapIsSet(true);
    return this;
  }

  public void unsetRequested_memonheap() {
    __isset_bit_vector.clear(__REQUESTED_MEMONHEAP_ISSET_ID);
  }

  /** Returns true if field requested_memonheap is set (has been assigned a value) and false otherwise */
  public boolean isSetRequested_memonheap() {
    return __isset_bit_vector.get(__REQUESTED_MEMONHEAP_ISSET_ID);
  }

  public void setRequested_memonheapIsSet(boolean value) {
    __isset_bit_vector.set(__REQUESTED_MEMONHEAP_ISSET_ID, value);
  }

  public double getRequested_memoffheap() {
    return this.requested_memoffheap;
  }

  public TopologyInfo setRequested_memoffheap(double requested_memoffheap) {
    this.requested_memoffheap = requested_memoffheap;
    setRequested_memoffheapIsSet(true);
    return this;
  }

  public void unsetRequested_memoffheap() {
    __isset_bit_vector.clear(__REQUESTED_MEMOFFHEAP_ISSET_ID);
  }

  /** Returns true if field requested_memoffheap is set (has been assigned a value) and false otherwise */
  public boolean isSetRequested_memoffheap() {
    return __isset_bit_vector.get(__REQUESTED_MEMOFFHEAP_ISSET_ID);
  }

  public void setRequested_memoffheapIsSet(boolean value) {
    __isset_bit_vector.set(__REQUESTED_MEMOFFHEAP_ISSET_ID, value);
  }

  public double getRequested_cpu() {
    return this.requested_cpu;
  }

  public TopologyInfo setRequested_cpu(double requested_cpu) {
    this.requested_cpu = requested_cpu;
    setRequested_cpuIsSet(true);
    return this;
  }

  public void unsetRequested_cpu() {
    __isset_bit_vector.clear(__REQUESTED_CPU_ISSET_ID);
  }

  /** Returns true if field requested_cpu is set (has been assigned a value) and false otherwise */
  public boolean isSetRequested_cpu() {
    return __isset_bit_vector.get(__REQUESTED_CPU_ISSET_ID);
  }

  public void setRequested_cpuIsSet(boolean value) {
    __isset_bit_vector.set(__REQUESTED_CPU_ISSET_ID, value);
  }

  public double getAssigned_memonheap() {
    return this.assigned_memonheap;
  }

  public TopologyInfo setAssigned_memonheap(double assigned_memonheap) {
    this.assigned_memonheap = assigned_memonheap;
    setAssigned_memonheapIsSet(true);
    return this;
  }

  public void unsetAssigned_memonheap() {
    __isset_bit_vector.clear(__ASSIGNED_MEMONHEAP_ISSET_ID);
  }

  /** Returns true if field assigned_memonheap is set (has been assigned a value) and false otherwise */
  public boolean isSetAssigned_memonheap() {
    return __isset_bit_vector.get(__ASSIGNED_MEMONHEAP_ISSET_ID);
  }

  public void setAssigned_memonheapIsSet(boolean value) {
    __isset_bit_vector.set(__ASSIGNED_MEMONHEAP_ISSET_ID, value);
  }

  public double getAssigned_memoffheap() {
    return this.assigned_memoffheap;
  }

  public TopologyInfo setAssigned_memoffheap(double assigned_memoffheap) {
    this.assigned_memoffheap = assigned_memoffheap;
    setAssigned_memoffheapIsSet(true);
    return this;
  }

  public void unsetAssigned_memoffheap() {
    __isset_bit_vector.clear(__ASSIGNED_MEMOFFHEAP_ISSET_ID);
  }

  /** Returns true if field assigned_memoffheap is set (has been assigned a value) and false otherwise */
  public boolean isSetAssigned_memoffheap() {
    return __isset_bit_vector.get(__ASSIGNED_MEMOFFHEAP_ISSET_ID);
  }

  public void setAssigned_memoffheapIsSet(boolean value) {
    __isset_bit_vector.set(__ASSIGNED_MEMOFFHEAP_ISSET_ID, value);
  }

  public double getAssigned_cpu() {
    return this.assigned_cpu;
  }

  public TopologyInfo setAssigned_cpu(double assigned_cpu) {
    this.assigned_cpu = assigned_cpu;
    setAssigned_cpuIsSet(true);
    return this;
  }

  public void unsetAssigned_cpu() {
    __isset_bit_vector.clear(__ASSIGNED_CPU_ISSET_ID);
  }

  /** Returns true if field assigned_cpu is set (has been assigned a value) and false otherwise */
  public boolean isSetAssigned_cpu() {
    return __isset_bit_vector.get(__ASSIGNED_CPU_ISSET_ID);
  }

  public void setAssigned_cpuIsSet(boolean value) {
    __isset_bit_vector.set(__ASSIGNED_CPU_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((String)value);
      }
      break;

    case NAME:
      if (value == null) {
        unsetName();
      } else {
        setName((String)value);
      }
      break;

    case UPTIME_SECS:
      if (value == null) {
        unsetUptime_secs();
      } else {
        setUptime_secs((Integer)value);
      }
      break;

    case EXECUTORS:
      if (value == null) {
        unsetExecutors();
      } else {
        setExecutors((List<ExecutorSummary>)value);
      }
      break;

    case STATUS:
      if (value == null) {
        unsetStatus();
      } else {
        setStatus((String)value);
      }
      break;

    case ERRORS:
      if (value == null) {
        unsetErrors();
      } else {
        setErrors((Map<String,List<ErrorInfo>>)value);
      }
      break;

    case COMPONENT_DEBUG:
      if (value == null) {
        unsetComponent_debug();
      } else {
        setComponent_debug((Map<String,DebugOptions>)value);
      }
      break;

    case SCHED_STATUS:
      if (value == null) {
        unsetSched_status();
      } else {
        setSched_status((String)value);
      }
      break;

    case OWNER:
      if (value == null) {
        unsetOwner();
      } else {
        setOwner((String)value);
      }
      break;

    case REPLICATION_COUNT:
      if (value == null) {
        unsetReplication_count();
      } else {
        setReplication_count((Integer)value);
      }
      break;

    case REQUESTED_MEMONHEAP:
      if (value == null) {
        unsetRequested_memonheap();
      } else {
        setRequested_memonheap((Double)value);
      }
      break;

    case REQUESTED_MEMOFFHEAP:
      if (value == null) {
        unsetRequested_memoffheap();
      } else {
        setRequested_memoffheap((Double)value);
      }
      break;

    case REQUESTED_CPU:
      if (value == null) {
        unsetRequested_cpu();
      } else {
        setRequested_cpu((Double)value);
      }
      break;

    case ASSIGNED_MEMONHEAP:
      if (value == null) {
        unsetAssigned_memonheap();
      } else {
        setAssigned_memonheap((Double)value);
      }
      break;

    case ASSIGNED_MEMOFFHEAP:
      if (value == null) {
        unsetAssigned_memoffheap();
      } else {
        setAssigned_memoffheap((Double)value);
      }
      break;

    case ASSIGNED_CPU:
      if (value == null) {
        unsetAssigned_cpu();
      } else {
        setAssigned_cpu((Double)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return getId();

    case NAME:
      return getName();

    case UPTIME_SECS:
      return Integer.valueOf(getUptime_secs());

    case EXECUTORS:
      return getExecutors();

    case STATUS:
      return getStatus();

    case ERRORS:
      return getErrors();

    case COMPONENT_DEBUG:
      return getComponent_debug();

    case SCHED_STATUS:
      return getSched_status();

    case OWNER:
      return getOwner();

    case REPLICATION_COUNT:
      return Integer.valueOf(getReplication_count());

    case REQUESTED_MEMONHEAP:
      return Double.valueOf(getRequested_memonheap());

    case REQUESTED_MEMOFFHEAP:
      return Double.valueOf(getRequested_memoffheap());

    case REQUESTED_CPU:
      return Double.valueOf(getRequested_cpu());

    case ASSIGNED_MEMONHEAP:
      return Double.valueOf(getAssigned_memonheap());

    case ASSIGNED_MEMOFFHEAP:
      return Double.valueOf(getAssigned_memoffheap());

    case ASSIGNED_CPU:
      return Double.valueOf(getAssigned_cpu());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case NAME:
      return isSetName();
    case UPTIME_SECS:
      return isSetUptime_secs();
    case EXECUTORS:
      return isSetExecutors();
    case STATUS:
      return isSetStatus();
    case ERRORS:
      return isSetErrors();
    case COMPONENT_DEBUG:
      return isSetComponent_debug();
    case SCHED_STATUS:
      return isSetSched_status();
    case OWNER:
      return isSetOwner();
    case REPLICATION_COUNT:
      return isSetReplication_count();
    case REQUESTED_MEMONHEAP:
      return isSetRequested_memonheap();
    case REQUESTED_MEMOFFHEAP:
      return isSetRequested_memoffheap();
    case REQUESTED_CPU:
      return isSetRequested_cpu();
    case ASSIGNED_MEMONHEAP:
      return isSetAssigned_memonheap();
    case ASSIGNED_MEMOFFHEAP:
      return isSetAssigned_memoffheap();
    case ASSIGNED_CPU:
      return isSetAssigned_cpu();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TopologyInfo)
      return this.equals((TopologyInfo)that);
    return false;
  }

  public boolean equals(TopologyInfo that) {
    if (that == null)
      return false;

    boolean this_present_id = true && this.isSetId();
    boolean that_present_id = true && that.isSetId();
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (!this.id.equals(that.id))
        return false;
    }

    boolean this_present_name = true && this.isSetName();
    boolean that_present_name = true && that.isSetName();
    if (this_present_name || that_present_name) {
      if (!(this_present_name && that_present_name))
        return false;
      if (!this.name.equals(that.name))
        return false;
    }

    boolean this_present_uptime_secs = true;
    boolean that_present_uptime_secs = true;
    if (this_present_uptime_secs || that_present_uptime_secs) {
      if (!(this_present_uptime_secs && that_present_uptime_secs))
        return false;
      if (this.uptime_secs != that.uptime_secs)
        return false;
    }

    boolean this_present_executors = true && this.isSetExecutors();
    boolean that_present_executors = true && that.isSetExecutors();
    if (this_present_executors || that_present_executors) {
      if (!(this_present_executors && that_present_executors))
        return false;
      if (!this.executors.equals(that.executors))
        return false;
    }

    boolean this_present_status = true && this.isSetStatus();
    boolean that_present_status = true && that.isSetStatus();
    if (this_present_status || that_present_status) {
      if (!(this_present_status && that_present_status))
        return false;
      if (!this.status.equals(that.status))
        return false;
    }

    boolean this_present_errors = true && this.isSetErrors();
    boolean that_present_errors = true && that.isSetErrors();
    if (this_present_errors || that_present_errors) {
      if (!(this_present_errors && that_present_errors))
        return false;
      if (!this.errors.equals(that.errors))
        return false;
    }

    boolean this_present_component_debug = true && this.isSetComponent_debug();
    boolean that_present_component_debug = true && that.isSetComponent_debug();
    if (this_present_component_debug || that_present_component_debug) {
      if (!(this_present_component_debug && that_present_component_debug))
        return false;
      if (!this.component_debug.equals(that.component_debug))
        return false;
    }

    boolean this_present_sched_status = true && this.isSetSched_status();
    boolean that_present_sched_status = true && that.isSetSched_status();
    if (this_present_sched_status || that_present_sched_status) {
      if (!(this_present_sched_status && that_present_sched_status))
        return false;
      if (!this.sched_status.equals(that.sched_status))
        return false;
    }

    boolean this_present_owner = true && this.isSetOwner();
    boolean that_present_owner = true && that.isSetOwner();
    if (this_present_owner || that_present_owner) {
      if (!(this_present_owner && that_present_owner))
        return false;
      if (!this.owner.equals(that.owner))
        return false;
    }

    boolean this_present_replication_count = true && this.isSetReplication_count();
    boolean that_present_replication_count = true && that.isSetReplication_count();
    if (this_present_replication_count || that_present_replication_count) {
      if (!(this_present_replication_count && that_present_replication_count))
        return false;
      if (this.replication_count != that.replication_count)
        return false;
    }

    boolean this_present_requested_memonheap = true && this.isSetRequested_memonheap();
    boolean that_present_requested_memonheap = true && that.isSetRequested_memonheap();
    if (this_present_requested_memonheap || that_present_requested_memonheap) {
      if (!(this_present_requested_memonheap && that_present_requested_memonheap))
        return false;
      if (this.requested_memonheap != that.requested_memonheap)
        return false;
    }

    boolean this_present_requested_memoffheap = true && this.isSetRequested_memoffheap();
    boolean that_present_requested_memoffheap = true && that.isSetRequested_memoffheap();
    if (this_present_requested_memoffheap || that_present_requested_memoffheap) {
      if (!(this_present_requested_memoffheap && that_present_requested_memoffheap))
        return false;
      if (this.requested_memoffheap != that.requested_memoffheap)
        return false;
    }

    boolean this_present_requested_cpu = true && this.isSetRequested_cpu();
    boolean that_present_requested_cpu = true && that.isSetRequested_cpu();
    if (this_present_requested_cpu || that_present_requested_cpu) {
      if (!(this_present_requested_cpu && that_present_requested_cpu))
        return false;
      if (this.requested_cpu != that.requested_cpu)
        return false;
    }

    boolean this_present_assigned_memonheap = true && this.isSetAssigned_memonheap();
    boolean that_present_assigned_memonheap = true && that.isSetAssigned_memonheap();
    if (this_present_assigned_memonheap || that_present_assigned_memonheap) {
      if (!(this_present_assigned_memonheap && that_present_assigned_memonheap))
        return false;
      if (this.assigned_memonheap != that.assigned_memonheap)
        return false;
    }

    boolean this_present_assigned_memoffheap = true && this.isSetAssigned_memoffheap();
    boolean that_present_assigned_memoffheap = true && that.isSetAssigned_memoffheap();
    if (this_present_assigned_memoffheap || that_present_assigned_memoffheap) {
      if (!(this_present_assigned_memoffheap && that_present_assigned_memoffheap))
        return false;
      if (this.assigned_memoffheap != that.assigned_memoffheap)
        return false;
    }

    boolean this_present_assigned_cpu = true && this.isSetAssigned_cpu();
    boolean that_present_assigned_cpu = true && that.isSetAssigned_cpu();
    if (this_present_assigned_cpu || that_present_assigned_cpu) {
      if (!(this_present_assigned_cpu && that_present_assigned_cpu))
        return false;
      if (this.assigned_cpu != that.assigned_cpu)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(TopologyInfo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    TopologyInfo typedOther = (TopologyInfo)other;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(typedOther.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, typedOther.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetName()).compareTo(typedOther.isSetName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, typedOther.name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUptime_secs()).compareTo(typedOther.isSetUptime_secs());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUptime_secs()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uptime_secs, typedOther.uptime_secs);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExecutors()).compareTo(typedOther.isSetExecutors());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExecutors()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.executors, typedOther.executors);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStatus()).compareTo(typedOther.isSetStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, typedOther.status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetErrors()).compareTo(typedOther.isSetErrors());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetErrors()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.errors, typedOther.errors);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetComponent_debug()).compareTo(typedOther.isSetComponent_debug());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetComponent_debug()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.component_debug, typedOther.component_debug);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSched_status()).compareTo(typedOther.isSetSched_status());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSched_status()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sched_status, typedOther.sched_status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOwner()).compareTo(typedOther.isSetOwner());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOwner()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.owner, typedOther.owner);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetReplication_count()).compareTo(typedOther.isSetReplication_count());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReplication_count()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.replication_count, typedOther.replication_count);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRequested_memonheap()).compareTo(typedOther.isSetRequested_memonheap());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRequested_memonheap()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.requested_memonheap, typedOther.requested_memonheap);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRequested_memoffheap()).compareTo(typedOther.isSetRequested_memoffheap());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRequested_memoffheap()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.requested_memoffheap, typedOther.requested_memoffheap);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRequested_cpu()).compareTo(typedOther.isSetRequested_cpu());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRequested_cpu()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.requested_cpu, typedOther.requested_cpu);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAssigned_memonheap()).compareTo(typedOther.isSetAssigned_memonheap());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAssigned_memonheap()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.assigned_memonheap, typedOther.assigned_memonheap);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAssigned_memoffheap()).compareTo(typedOther.isSetAssigned_memoffheap());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAssigned_memoffheap()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.assigned_memoffheap, typedOther.assigned_memoffheap);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAssigned_cpu()).compareTo(typedOther.isSetAssigned_cpu());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAssigned_cpu()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.assigned_cpu, typedOther.assigned_cpu);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TopologyInfo(");
    boolean first = true;

    sb.append("id:");
    if (this.id == null) {
      sb.append("null");
    } else {
      sb.append(this.id);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("name:");
    if (this.name == null) {
      sb.append("null");
    } else {
      sb.append(this.name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("uptime_secs:");
    sb.append(this.uptime_secs);
    first = false;
    if (!first) sb.append(", ");
    sb.append("executors:");
    if (this.executors == null) {
      sb.append("null");
    } else {
      sb.append(this.executors);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("status:");
    if (this.status == null) {
      sb.append("null");
    } else {
      sb.append(this.status);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("errors:");
    if (this.errors == null) {
      sb.append("null");
    } else {
      sb.append(this.errors);
    }
    first = false;
    if (isSetComponent_debug()) {
      if (!first) sb.append(", ");
      sb.append("component_debug:");
      if (this.component_debug == null) {
        sb.append("null");
      } else {
        sb.append(this.component_debug);
      }
      first = false;
    }
    if (isSetSched_status()) {
      if (!first) sb.append(", ");
      sb.append("sched_status:");
      if (this.sched_status == null) {
        sb.append("null");
      } else {
        sb.append(this.sched_status);
      }
      first = false;
    }
    if (isSetOwner()) {
      if (!first) sb.append(", ");
      sb.append("owner:");
      if (this.owner == null) {
        sb.append("null");
      } else {
        sb.append(this.owner);
      }
      first = false;
    }
    if (isSetReplication_count()) {
      if (!first) sb.append(", ");
      sb.append("replication_count:");
      sb.append(this.replication_count);
      first = false;
    }
    if (isSetRequested_memonheap()) {
      if (!first) sb.append(", ");
      sb.append("requested_memonheap:");
      sb.append(this.requested_memonheap);
      first = false;
    }
    if (isSetRequested_memoffheap()) {
      if (!first) sb.append(", ");
      sb.append("requested_memoffheap:");
      sb.append(this.requested_memoffheap);
      first = false;
    }
    if (isSetRequested_cpu()) {
      if (!first) sb.append(", ");
      sb.append("requested_cpu:");
      sb.append(this.requested_cpu);
      first = false;
    }
    if (isSetAssigned_memonheap()) {
      if (!first) sb.append(", ");
      sb.append("assigned_memonheap:");
      sb.append(this.assigned_memonheap);
      first = false;
    }
    if (isSetAssigned_memoffheap()) {
      if (!first) sb.append(", ");
      sb.append("assigned_memoffheap:");
      sb.append(this.assigned_memoffheap);
      first = false;
    }
    if (isSetAssigned_cpu()) {
      if (!first) sb.append(", ");
      sb.append("assigned_cpu:");
      sb.append(this.assigned_cpu);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (id == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'id' was not present! Struct: " + toString());
    }
    if (name == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'name' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'uptime_secs' because it's a primitive and you chose the non-beans generator.
    if (executors == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'executors' was not present! Struct: " + toString());
    }
    if (status == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'status' was not present! Struct: " + toString());
    }
    if (errors == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'errors' was not present! Struct: " + toString());
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bit_vector = new BitSet(1);
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TopologyInfoStandardSchemeFactory implements SchemeFactory {
    public TopologyInfoStandardScheme getScheme() {
      return new TopologyInfoStandardScheme();
    }
  }

  private static class TopologyInfoStandardScheme extends StandardScheme<TopologyInfo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TopologyInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.id = iprot.readString();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.name = iprot.readString();
              struct.setNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // UPTIME_SECS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.uptime_secs = iprot.readI32();
              struct.setUptime_secsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // EXECUTORS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list332 = iprot.readListBegin();
                struct.executors = new ArrayList<ExecutorSummary>(_list332.size);
                for (int _i333 = 0; _i333 < _list332.size; ++_i333)
                {
                  ExecutorSummary _elem334; // required
                  _elem334 = new ExecutorSummary();
                  _elem334.read(iprot);
                  struct.executors.add(_elem334);
                }
                iprot.readListEnd();
              }
              struct.setExecutorsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.status = iprot.readString();
              struct.setStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // ERRORS
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map335 = iprot.readMapBegin();
                struct.errors = new HashMap<String,List<ErrorInfo>>(2*_map335.size);
                for (int _i336 = 0; _i336 < _map335.size; ++_i336)
                {
                  String _key337; // required
                  List<ErrorInfo> _val338; // required
                  _key337 = iprot.readString();
                  {
                    org.apache.thrift.protocol.TList _list339 = iprot.readListBegin();
                    _val338 = new ArrayList<ErrorInfo>(_list339.size);
                    for (int _i340 = 0; _i340 < _list339.size; ++_i340)
                    {
                      ErrorInfo _elem341; // required
                      _elem341 = new ErrorInfo();
                      _elem341.read(iprot);
                      _val338.add(_elem341);
                    }
                    iprot.readListEnd();
                  }
                  struct.errors.put(_key337, _val338);
                }
                iprot.readMapEnd();
              }
              struct.setErrorsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // COMPONENT_DEBUG
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map342 = iprot.readMapBegin();
                struct.component_debug = new HashMap<String,DebugOptions>(2*_map342.size);
                for (int _i343 = 0; _i343 < _map342.size; ++_i343)
                {
                  String _key344; // required
                  DebugOptions _val345; // required
                  _key344 = iprot.readString();
                  _val345 = new DebugOptions();
                  _val345.read(iprot);
                  struct.component_debug.put(_key344, _val345);
                }
                iprot.readMapEnd();
              }
              struct.setComponent_debugIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 513: // SCHED_STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.sched_status = iprot.readString();
              struct.setSched_statusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 514: // OWNER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.owner = iprot.readString();
              struct.setOwnerIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 515: // REPLICATION_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.replication_count = iprot.readI32();
              struct.setReplication_countIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 521: // REQUESTED_MEMONHEAP
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.requested_memonheap = iprot.readDouble();
              struct.setRequested_memonheapIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 522: // REQUESTED_MEMOFFHEAP
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.requested_memoffheap = iprot.readDouble();
              struct.setRequested_memoffheapIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 523: // REQUESTED_CPU
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.requested_cpu = iprot.readDouble();
              struct.setRequested_cpuIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 524: // ASSIGNED_MEMONHEAP
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.assigned_memonheap = iprot.readDouble();
              struct.setAssigned_memonheapIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 525: // ASSIGNED_MEMOFFHEAP
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.assigned_memoffheap = iprot.readDouble();
              struct.setAssigned_memoffheapIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 526: // ASSIGNED_CPU
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.assigned_cpu = iprot.readDouble();
              struct.setAssigned_cpuIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetUptime_secs()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'uptime_secs' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TopologyInfo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.id != null) {
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeString(struct.id);
        oprot.writeFieldEnd();
      }
      if (struct.name != null) {
        oprot.writeFieldBegin(NAME_FIELD_DESC);
        oprot.writeString(struct.name);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(UPTIME_SECS_FIELD_DESC);
      oprot.writeI32(struct.uptime_secs);
      oprot.writeFieldEnd();
      if (struct.executors != null) {
        oprot.writeFieldBegin(EXECUTORS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.executors.size()));
          for (ExecutorSummary _iter346 : struct.executors)
          {
            _iter346.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.status != null) {
        oprot.writeFieldBegin(STATUS_FIELD_DESC);
        oprot.writeString(struct.status);
        oprot.writeFieldEnd();
      }
      if (struct.errors != null) {
        oprot.writeFieldBegin(ERRORS_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.LIST, struct.errors.size()));
          for (Map.Entry<String, List<ErrorInfo>> _iter347 : struct.errors.entrySet())
          {
            oprot.writeString(_iter347.getKey());
            {
              oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, _iter347.getValue().size()));
              for (ErrorInfo _iter348 : _iter347.getValue())
              {
                _iter348.write(oprot);
              }
              oprot.writeListEnd();
            }
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.component_debug != null) {
        if (struct.isSetComponent_debug()) {
          oprot.writeFieldBegin(COMPONENT_DEBUG_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRUCT, struct.component_debug.size()));
            for (Map.Entry<String, DebugOptions> _iter349 : struct.component_debug.entrySet())
            {
              oprot.writeString(_iter349.getKey());
              _iter349.getValue().write(oprot);
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.sched_status != null) {
        if (struct.isSetSched_status()) {
          oprot.writeFieldBegin(SCHED_STATUS_FIELD_DESC);
          oprot.writeString(struct.sched_status);
          oprot.writeFieldEnd();
        }
      }
      if (struct.owner != null) {
        if (struct.isSetOwner()) {
          oprot.writeFieldBegin(OWNER_FIELD_DESC);
          oprot.writeString(struct.owner);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetReplication_count()) {
        oprot.writeFieldBegin(REPLICATION_COUNT_FIELD_DESC);
        oprot.writeI32(struct.replication_count);
        oprot.writeFieldEnd();
      }
      if (struct.isSetRequested_memonheap()) {
        oprot.writeFieldBegin(REQUESTED_MEMONHEAP_FIELD_DESC);
        oprot.writeDouble(struct.requested_memonheap);
        oprot.writeFieldEnd();
      }
      if (struct.isSetRequested_memoffheap()) {
        oprot.writeFieldBegin(REQUESTED_MEMOFFHEAP_FIELD_DESC);
        oprot.writeDouble(struct.requested_memoffheap);
        oprot.writeFieldEnd();
      }
      if (struct.isSetRequested_cpu()) {
        oprot.writeFieldBegin(REQUESTED_CPU_FIELD_DESC);
        oprot.writeDouble(struct.requested_cpu);
        oprot.writeFieldEnd();
      }
      if (struct.isSetAssigned_memonheap()) {
        oprot.writeFieldBegin(ASSIGNED_MEMONHEAP_FIELD_DESC);
        oprot.writeDouble(struct.assigned_memonheap);
        oprot.writeFieldEnd();
      }
      if (struct.isSetAssigned_memoffheap()) {
        oprot.writeFieldBegin(ASSIGNED_MEMOFFHEAP_FIELD_DESC);
        oprot.writeDouble(struct.assigned_memoffheap);
        oprot.writeFieldEnd();
      }
      if (struct.isSetAssigned_cpu()) {
        oprot.writeFieldBegin(ASSIGNED_CPU_FIELD_DESC);
        oprot.writeDouble(struct.assigned_cpu);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TopologyInfoTupleSchemeFactory implements SchemeFactory {
    public TopologyInfoTupleScheme getScheme() {
      return new TopologyInfoTupleScheme();
    }
  }

  private static class TopologyInfoTupleScheme extends TupleScheme<TopologyInfo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TopologyInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeString(struct.id);
      oprot.writeString(struct.name);
      oprot.writeI32(struct.uptime_secs);
      {
        oprot.writeI32(struct.executors.size());
        for (ExecutorSummary _iter350 : struct.executors)
        {
          _iter350.write(oprot);
        }
      }
      oprot.writeString(struct.status);
      {
        oprot.writeI32(struct.errors.size());
        for (Map.Entry<String, List<ErrorInfo>> _iter351 : struct.errors.entrySet())
        {
          oprot.writeString(_iter351.getKey());
          {
            oprot.writeI32(_iter351.getValue().size());
            for (ErrorInfo _iter352 : _iter351.getValue())
            {
              _iter352.write(oprot);
            }
          }
        }
      }
      BitSet optionals = new BitSet();
      if (struct.isSetComponent_debug()) {
        optionals.set(0);
      }
      if (struct.isSetSched_status()) {
        optionals.set(1);
      }
      if (struct.isSetOwner()) {
        optionals.set(2);
      }
      if (struct.isSetReplication_count()) {
        optionals.set(3);
      }
      if (struct.isSetRequested_memonheap()) {
        optionals.set(4);
      }
      if (struct.isSetRequested_memoffheap()) {
        optionals.set(5);
      }
      if (struct.isSetRequested_cpu()) {
        optionals.set(6);
      }
      if (struct.isSetAssigned_memonheap()) {
        optionals.set(7);
      }
      if (struct.isSetAssigned_memoffheap()) {
        optionals.set(8);
      }
      if (struct.isSetAssigned_cpu()) {
        optionals.set(9);
      }
      oprot.writeBitSet(optionals, 10);
      if (struct.isSetComponent_debug()) {
        {
          oprot.writeI32(struct.component_debug.size());
          for (Map.Entry<String, DebugOptions> _iter353 : struct.component_debug.entrySet())
          {
            oprot.writeString(_iter353.getKey());
            _iter353.getValue().write(oprot);
          }
        }
      }
      if (struct.isSetSched_status()) {
        oprot.writeString(struct.sched_status);
      }
      if (struct.isSetOwner()) {
        oprot.writeString(struct.owner);
      }
      if (struct.isSetReplication_count()) {
        oprot.writeI32(struct.replication_count);
      }
      if (struct.isSetRequested_memonheap()) {
        oprot.writeDouble(struct.requested_memonheap);
      }
      if (struct.isSetRequested_memoffheap()) {
        oprot.writeDouble(struct.requested_memoffheap);
      }
      if (struct.isSetRequested_cpu()) {
        oprot.writeDouble(struct.requested_cpu);
      }
      if (struct.isSetAssigned_memonheap()) {
        oprot.writeDouble(struct.assigned_memonheap);
      }
      if (struct.isSetAssigned_memoffheap()) {
        oprot.writeDouble(struct.assigned_memoffheap);
      }
      if (struct.isSetAssigned_cpu()) {
        oprot.writeDouble(struct.assigned_cpu);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TopologyInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.id = iprot.readString();
      struct.setIdIsSet(true);
      struct.name = iprot.readString();
      struct.setNameIsSet(true);
      struct.uptime_secs = iprot.readI32();
      struct.setUptime_secsIsSet(true);
      {
        org.apache.thrift.protocol.TList _list354 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
        struct.executors = new ArrayList<ExecutorSummary>(_list354.size);
        for (int _i355 = 0; _i355 < _list354.size; ++_i355)
        {
          ExecutorSummary _elem356; // required
          _elem356 = new ExecutorSummary();
          _elem356.read(iprot);
          struct.executors.add(_elem356);
        }
      }
      struct.setExecutorsIsSet(true);
      struct.status = iprot.readString();
      struct.setStatusIsSet(true);
      {
        org.apache.thrift.protocol.TMap _map357 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.LIST, iprot.readI32());
        struct.errors = new HashMap<String,List<ErrorInfo>>(2*_map357.size);
        for (int _i358 = 0; _i358 < _map357.size; ++_i358)
        {
          String _key359; // required
          List<ErrorInfo> _val360; // required
          _key359 = iprot.readString();
          {
            org.apache.thrift.protocol.TList _list361 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            _val360 = new ArrayList<ErrorInfo>(_list361.size);
            for (int _i362 = 0; _i362 < _list361.size; ++_i362)
            {
              ErrorInfo _elem363; // required
              _elem363 = new ErrorInfo();
              _elem363.read(iprot);
              _val360.add(_elem363);
            }
          }
          struct.errors.put(_key359, _val360);
        }
      }
      struct.setErrorsIsSet(true);
      BitSet incoming = iprot.readBitSet(10);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TMap _map364 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.component_debug = new HashMap<String,DebugOptions>(2*_map364.size);
          for (int _i365 = 0; _i365 < _map364.size; ++_i365)
          {
            String _key366; // required
            DebugOptions _val367; // required
            _key366 = iprot.readString();
            _val367 = new DebugOptions();
            _val367.read(iprot);
            struct.component_debug.put(_key366, _val367);
          }
        }
        struct.setComponent_debugIsSet(true);
      }
      if (incoming.get(1)) {
        struct.sched_status = iprot.readString();
        struct.setSched_statusIsSet(true);
      }
      if (incoming.get(2)) {
        struct.owner = iprot.readString();
        struct.setOwnerIsSet(true);
      }
      if (incoming.get(3)) {
        struct.replication_count = iprot.readI32();
        struct.setReplication_countIsSet(true);
      }
      if (incoming.get(4)) {
        struct.requested_memonheap = iprot.readDouble();
        struct.setRequested_memonheapIsSet(true);
      }
      if (incoming.get(5)) {
        struct.requested_memoffheap = iprot.readDouble();
        struct.setRequested_memoffheapIsSet(true);
      }
      if (incoming.get(6)) {
        struct.requested_cpu = iprot.readDouble();
        struct.setRequested_cpuIsSet(true);
      }
      if (incoming.get(7)) {
        struct.assigned_memonheap = iprot.readDouble();
        struct.setAssigned_memonheapIsSet(true);
      }
      if (incoming.get(8)) {
        struct.assigned_memoffheap = iprot.readDouble();
        struct.setAssigned_memoffheapIsSet(true);
      }
      if (incoming.get(9)) {
        struct.assigned_cpu = iprot.readDouble();
        struct.setAssigned_cpuIsSet(true);
      }
    }
  }

}

