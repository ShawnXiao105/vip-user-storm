/**
 * Autogenerated by Thrift Compiler (0.8.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.apache.storm.generated;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class WorkerSummary implements org.apache.thrift.TBase<WorkerSummary, WorkerSummary._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("WorkerSummary");

  private static final org.apache.thrift.protocol.TField SUPERVISOR_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("supervisor_id", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField HOST_FIELD_DESC = new org.apache.thrift.protocol.TField("host", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField PORT_FIELD_DESC = new org.apache.thrift.protocol.TField("port", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField TOPOLOGY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("topology_id", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField TOPOLOGY_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("topology_name", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField NUM_EXECUTORS_FIELD_DESC = new org.apache.thrift.protocol.TField("num_executors", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField COMPONENT_TO_NUM_TASKS_FIELD_DESC = new org.apache.thrift.protocol.TField("component_to_num_tasks", org.apache.thrift.protocol.TType.MAP, (short)7);
  private static final org.apache.thrift.protocol.TField TIME_SECS_FIELD_DESC = new org.apache.thrift.protocol.TField("time_secs", org.apache.thrift.protocol.TType.I32, (short)8);
  private static final org.apache.thrift.protocol.TField UPTIME_SECS_FIELD_DESC = new org.apache.thrift.protocol.TField("uptime_secs", org.apache.thrift.protocol.TType.I32, (short)9);
  private static final org.apache.thrift.protocol.TField REQUESTED_MEMONHEAP_FIELD_DESC = new org.apache.thrift.protocol.TField("requested_memonheap", org.apache.thrift.protocol.TType.DOUBLE, (short)521);
  private static final org.apache.thrift.protocol.TField REQUESTED_MEMOFFHEAP_FIELD_DESC = new org.apache.thrift.protocol.TField("requested_memoffheap", org.apache.thrift.protocol.TType.DOUBLE, (short)522);
  private static final org.apache.thrift.protocol.TField REQUESTED_CPU_FIELD_DESC = new org.apache.thrift.protocol.TField("requested_cpu", org.apache.thrift.protocol.TType.DOUBLE, (short)523);
  private static final org.apache.thrift.protocol.TField ASSIGNED_MEMONHEAP_FIELD_DESC = new org.apache.thrift.protocol.TField("assigned_memonheap", org.apache.thrift.protocol.TType.DOUBLE, (short)524);
  private static final org.apache.thrift.protocol.TField ASSIGNED_MEMOFFHEAP_FIELD_DESC = new org.apache.thrift.protocol.TField("assigned_memoffheap", org.apache.thrift.protocol.TType.DOUBLE, (short)525);
  private static final org.apache.thrift.protocol.TField ASSIGNED_CPU_FIELD_DESC = new org.apache.thrift.protocol.TField("assigned_cpu", org.apache.thrift.protocol.TType.DOUBLE, (short)526);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new WorkerSummaryStandardSchemeFactory());
    schemes.put(TupleScheme.class, new WorkerSummaryTupleSchemeFactory());
  }

  public String supervisor_id; // required
  public String host; // required
  public int port; // required
  public String topology_id; // required
  public String topology_name; // required
  public int num_executors; // required
  public Map<String,Long> component_to_num_tasks; // required
  public int time_secs; // required
  public int uptime_secs; // required
  public double requested_memonheap; // required
  public double requested_memoffheap; // required
  public double requested_cpu; // required
  public double assigned_memonheap; // required
  public double assigned_memoffheap; // required
  public double assigned_cpu; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    SUPERVISOR_ID((short)1, "supervisor_id"),
    HOST((short)2, "host"),
    PORT((short)3, "port"),
    TOPOLOGY_ID((short)4, "topology_id"),
    TOPOLOGY_NAME((short)5, "topology_name"),
    NUM_EXECUTORS((short)6, "num_executors"),
    COMPONENT_TO_NUM_TASKS((short)7, "component_to_num_tasks"),
    TIME_SECS((short)8, "time_secs"),
    UPTIME_SECS((short)9, "uptime_secs"),
    REQUESTED_MEMONHEAP((short)521, "requested_memonheap"),
    REQUESTED_MEMOFFHEAP((short)522, "requested_memoffheap"),
    REQUESTED_CPU((short)523, "requested_cpu"),
    ASSIGNED_MEMONHEAP((short)524, "assigned_memonheap"),
    ASSIGNED_MEMOFFHEAP((short)525, "assigned_memoffheap"),
    ASSIGNED_CPU((short)526, "assigned_cpu");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // SUPERVISOR_ID
          return SUPERVISOR_ID;
        case 2: // HOST
          return HOST;
        case 3: // PORT
          return PORT;
        case 4: // TOPOLOGY_ID
          return TOPOLOGY_ID;
        case 5: // TOPOLOGY_NAME
          return TOPOLOGY_NAME;
        case 6: // NUM_EXECUTORS
          return NUM_EXECUTORS;
        case 7: // COMPONENT_TO_NUM_TASKS
          return COMPONENT_TO_NUM_TASKS;
        case 8: // TIME_SECS
          return TIME_SECS;
        case 9: // UPTIME_SECS
          return UPTIME_SECS;
        case 521: // REQUESTED_MEMONHEAP
          return REQUESTED_MEMONHEAP;
        case 522: // REQUESTED_MEMOFFHEAP
          return REQUESTED_MEMOFFHEAP;
        case 523: // REQUESTED_CPU
          return REQUESTED_CPU;
        case 524: // ASSIGNED_MEMONHEAP
          return ASSIGNED_MEMONHEAP;
        case 525: // ASSIGNED_MEMOFFHEAP
          return ASSIGNED_MEMOFFHEAP;
        case 526: // ASSIGNED_CPU
          return ASSIGNED_CPU;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __PORT_ISSET_ID = 0;
  private static final int __NUM_EXECUTORS_ISSET_ID = 1;
  private static final int __TIME_SECS_ISSET_ID = 2;
  private static final int __UPTIME_SECS_ISSET_ID = 3;
  private static final int __REQUESTED_MEMONHEAP_ISSET_ID = 4;
  private static final int __REQUESTED_MEMOFFHEAP_ISSET_ID = 5;
  private static final int __REQUESTED_CPU_ISSET_ID = 6;
  private static final int __ASSIGNED_MEMONHEAP_ISSET_ID = 7;
  private static final int __ASSIGNED_MEMOFFHEAP_ISSET_ID = 8;
  private static final int __ASSIGNED_CPU_ISSET_ID = 9;
  private BitSet __isset_bit_vector = new BitSet(10);
  private _Fields optionals[] = {_Fields.SUPERVISOR_ID,_Fields.HOST,_Fields.PORT,_Fields.TOPOLOGY_ID,_Fields.TOPOLOGY_NAME,_Fields.NUM_EXECUTORS,_Fields.COMPONENT_TO_NUM_TASKS,_Fields.TIME_SECS,_Fields.UPTIME_SECS,_Fields.REQUESTED_MEMONHEAP,_Fields.REQUESTED_MEMOFFHEAP,_Fields.REQUESTED_CPU,_Fields.ASSIGNED_MEMONHEAP,_Fields.ASSIGNED_MEMOFFHEAP,_Fields.ASSIGNED_CPU};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.SUPERVISOR_ID, new org.apache.thrift.meta_data.FieldMetaData("supervisor_id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.HOST, new org.apache.thrift.meta_data.FieldMetaData("host", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PORT, new org.apache.thrift.meta_data.FieldMetaData("port", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TOPOLOGY_ID, new org.apache.thrift.meta_data.FieldMetaData("topology_id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TOPOLOGY_NAME, new org.apache.thrift.meta_data.FieldMetaData("topology_name", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NUM_EXECUTORS, new org.apache.thrift.meta_data.FieldMetaData("num_executors", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.COMPONENT_TO_NUM_TASKS, new org.apache.thrift.meta_data.FieldMetaData("component_to_num_tasks", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
    tmpMap.put(_Fields.TIME_SECS, new org.apache.thrift.meta_data.FieldMetaData("time_secs", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.UPTIME_SECS, new org.apache.thrift.meta_data.FieldMetaData("uptime_secs", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.REQUESTED_MEMONHEAP, new org.apache.thrift.meta_data.FieldMetaData("requested_memonheap", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.REQUESTED_MEMOFFHEAP, new org.apache.thrift.meta_data.FieldMetaData("requested_memoffheap", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.REQUESTED_CPU, new org.apache.thrift.meta_data.FieldMetaData("requested_cpu", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.ASSIGNED_MEMONHEAP, new org.apache.thrift.meta_data.FieldMetaData("assigned_memonheap", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.ASSIGNED_MEMOFFHEAP, new org.apache.thrift.meta_data.FieldMetaData("assigned_memoffheap", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.ASSIGNED_CPU, new org.apache.thrift.meta_data.FieldMetaData("assigned_cpu", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(WorkerSummary.class, metaDataMap);
  }

  public WorkerSummary() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public WorkerSummary(WorkerSummary other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    if (other.isSetSupervisor_id()) {
      this.supervisor_id = other.supervisor_id;
    }
    if (other.isSetHost()) {
      this.host = other.host;
    }
    this.port = other.port;
    if (other.isSetTopology_id()) {
      this.topology_id = other.topology_id;
    }
    if (other.isSetTopology_name()) {
      this.topology_name = other.topology_name;
    }
    this.num_executors = other.num_executors;
    if (other.isSetComponent_to_num_tasks()) {
      Map<String,Long> __this__component_to_num_tasks = new HashMap<String,Long>();
      for (Map.Entry<String, Long> other_element : other.component_to_num_tasks.entrySet()) {

        String other_element_key = other_element.getKey();
        Long other_element_value = other_element.getValue();

        String __this__component_to_num_tasks_copy_key = other_element_key;

        Long __this__component_to_num_tasks_copy_value = other_element_value;

        __this__component_to_num_tasks.put(__this__component_to_num_tasks_copy_key, __this__component_to_num_tasks_copy_value);
      }
      this.component_to_num_tasks = __this__component_to_num_tasks;
    }
    this.time_secs = other.time_secs;
    this.uptime_secs = other.uptime_secs;
    this.requested_memonheap = other.requested_memonheap;
    this.requested_memoffheap = other.requested_memoffheap;
    this.requested_cpu = other.requested_cpu;
    this.assigned_memonheap = other.assigned_memonheap;
    this.assigned_memoffheap = other.assigned_memoffheap;
    this.assigned_cpu = other.assigned_cpu;
  }

  public WorkerSummary deepCopy() {
    return new WorkerSummary(this);
  }

  @Override
  public void clear() {
    this.supervisor_id = null;
    this.host = null;
    setPortIsSet(false);
    this.port = 0;
    this.topology_id = null;
    this.topology_name = null;
    setNum_executorsIsSet(false);
    this.num_executors = 0;
    this.component_to_num_tasks = null;
    setTime_secsIsSet(false);
    this.time_secs = 0;
    setUptime_secsIsSet(false);
    this.uptime_secs = 0;
    setRequested_memonheapIsSet(false);
    this.requested_memonheap = 0.0;
    setRequested_memoffheapIsSet(false);
    this.requested_memoffheap = 0.0;
    setRequested_cpuIsSet(false);
    this.requested_cpu = 0.0;
    setAssigned_memonheapIsSet(false);
    this.assigned_memonheap = 0.0;
    setAssigned_memoffheapIsSet(false);
    this.assigned_memoffheap = 0.0;
    setAssigned_cpuIsSet(false);
    this.assigned_cpu = 0.0;
  }

  public String getSupervisor_id() {
    return this.supervisor_id;
  }

  public WorkerSummary setSupervisor_id(String supervisor_id) {
    this.supervisor_id = supervisor_id;
    return this;
  }

  public void unsetSupervisor_id() {
    this.supervisor_id = null;
  }

  /** Returns true if field supervisor_id is set (has been assigned a value) and false otherwise */
  public boolean isSetSupervisor_id() {
    return this.supervisor_id != null;
  }

  public void setSupervisor_idIsSet(boolean value) {
    if (!value) {
      this.supervisor_id = null;
    }
  }

  public String getHost() {
    return this.host;
  }

  public WorkerSummary setHost(String host) {
    this.host = host;
    return this;
  }

  public void unsetHost() {
    this.host = null;
  }

  /** Returns true if field host is set (has been assigned a value) and false otherwise */
  public boolean isSetHost() {
    return this.host != null;
  }

  public void setHostIsSet(boolean value) {
    if (!value) {
      this.host = null;
    }
  }

  public int getPort() {
    return this.port;
  }

  public WorkerSummary setPort(int port) {
    this.port = port;
    setPortIsSet(true);
    return this;
  }

  public void unsetPort() {
    __isset_bit_vector.clear(__PORT_ISSET_ID);
  }

  /** Returns true if field port is set (has been assigned a value) and false otherwise */
  public boolean isSetPort() {
    return __isset_bit_vector.get(__PORT_ISSET_ID);
  }

  public void setPortIsSet(boolean value) {
    __isset_bit_vector.set(__PORT_ISSET_ID, value);
  }

  public String getTopology_id() {
    return this.topology_id;
  }

  public WorkerSummary setTopology_id(String topology_id) {
    this.topology_id = topology_id;
    return this;
  }

  public void unsetTopology_id() {
    this.topology_id = null;
  }

  /** Returns true if field topology_id is set (has been assigned a value) and false otherwise */
  public boolean isSetTopology_id() {
    return this.topology_id != null;
  }

  public void setTopology_idIsSet(boolean value) {
    if (!value) {
      this.topology_id = null;
    }
  }

  public String getTopology_name() {
    return this.topology_name;
  }

  public WorkerSummary setTopology_name(String topology_name) {
    this.topology_name = topology_name;
    return this;
  }

  public void unsetTopology_name() {
    this.topology_name = null;
  }

  /** Returns true if field topology_name is set (has been assigned a value) and false otherwise */
  public boolean isSetTopology_name() {
    return this.topology_name != null;
  }

  public void setTopology_nameIsSet(boolean value) {
    if (!value) {
      this.topology_name = null;
    }
  }

  public int getNum_executors() {
    return this.num_executors;
  }

  public WorkerSummary setNum_executors(int num_executors) {
    this.num_executors = num_executors;
    setNum_executorsIsSet(true);
    return this;
  }

  public void unsetNum_executors() {
    __isset_bit_vector.clear(__NUM_EXECUTORS_ISSET_ID);
  }

  /** Returns true if field num_executors is set (has been assigned a value) and false otherwise */
  public boolean isSetNum_executors() {
    return __isset_bit_vector.get(__NUM_EXECUTORS_ISSET_ID);
  }

  public void setNum_executorsIsSet(boolean value) {
    __isset_bit_vector.set(__NUM_EXECUTORS_ISSET_ID, value);
  }

  public int getComponent_to_num_tasksSize() {
    return (this.component_to_num_tasks == null) ? 0 : this.component_to_num_tasks.size();
  }

  public void putToComponent_to_num_tasks(String key, long val) {
    if (this.component_to_num_tasks == null) {
      this.component_to_num_tasks = new HashMap<String,Long>();
    }
    this.component_to_num_tasks.put(key, val);
  }

  public Map<String,Long> getComponent_to_num_tasks() {
    return this.component_to_num_tasks;
  }

  public WorkerSummary setComponent_to_num_tasks(Map<String,Long> component_to_num_tasks) {
    this.component_to_num_tasks = component_to_num_tasks;
    return this;
  }

  public void unsetComponent_to_num_tasks() {
    this.component_to_num_tasks = null;
  }

  /** Returns true if field component_to_num_tasks is set (has been assigned a value) and false otherwise */
  public boolean isSetComponent_to_num_tasks() {
    return this.component_to_num_tasks != null;
  }

  public void setComponent_to_num_tasksIsSet(boolean value) {
    if (!value) {
      this.component_to_num_tasks = null;
    }
  }

  public int getTime_secs() {
    return this.time_secs;
  }

  public WorkerSummary setTime_secs(int time_secs) {
    this.time_secs = time_secs;
    setTime_secsIsSet(true);
    return this;
  }

  public void unsetTime_secs() {
    __isset_bit_vector.clear(__TIME_SECS_ISSET_ID);
  }

  /** Returns true if field time_secs is set (has been assigned a value) and false otherwise */
  public boolean isSetTime_secs() {
    return __isset_bit_vector.get(__TIME_SECS_ISSET_ID);
  }

  public void setTime_secsIsSet(boolean value) {
    __isset_bit_vector.set(__TIME_SECS_ISSET_ID, value);
  }

  public int getUptime_secs() {
    return this.uptime_secs;
  }

  public WorkerSummary setUptime_secs(int uptime_secs) {
    this.uptime_secs = uptime_secs;
    setUptime_secsIsSet(true);
    return this;
  }

  public void unsetUptime_secs() {
    __isset_bit_vector.clear(__UPTIME_SECS_ISSET_ID);
  }

  /** Returns true if field uptime_secs is set (has been assigned a value) and false otherwise */
  public boolean isSetUptime_secs() {
    return __isset_bit_vector.get(__UPTIME_SECS_ISSET_ID);
  }

  public void setUptime_secsIsSet(boolean value) {
    __isset_bit_vector.set(__UPTIME_SECS_ISSET_ID, value);
  }

  public double getRequested_memonheap() {
    return this.requested_memonheap;
  }

  public WorkerSummary setRequested_memonheap(double requested_memonheap) {
    this.requested_memonheap = requested_memonheap;
    setRequested_memonheapIsSet(true);
    return this;
  }

  public void unsetRequested_memonheap() {
    __isset_bit_vector.clear(__REQUESTED_MEMONHEAP_ISSET_ID);
  }

  /** Returns true if field requested_memonheap is set (has been assigned a value) and false otherwise */
  public boolean isSetRequested_memonheap() {
    return __isset_bit_vector.get(__REQUESTED_MEMONHEAP_ISSET_ID);
  }

  public void setRequested_memonheapIsSet(boolean value) {
    __isset_bit_vector.set(__REQUESTED_MEMONHEAP_ISSET_ID, value);
  }

  public double getRequested_memoffheap() {
    return this.requested_memoffheap;
  }

  public WorkerSummary setRequested_memoffheap(double requested_memoffheap) {
    this.requested_memoffheap = requested_memoffheap;
    setRequested_memoffheapIsSet(true);
    return this;
  }

  public void unsetRequested_memoffheap() {
    __isset_bit_vector.clear(__REQUESTED_MEMOFFHEAP_ISSET_ID);
  }

  /** Returns true if field requested_memoffheap is set (has been assigned a value) and false otherwise */
  public boolean isSetRequested_memoffheap() {
    return __isset_bit_vector.get(__REQUESTED_MEMOFFHEAP_ISSET_ID);
  }

  public void setRequested_memoffheapIsSet(boolean value) {
    __isset_bit_vector.set(__REQUESTED_MEMOFFHEAP_ISSET_ID, value);
  }

  public double getRequested_cpu() {
    return this.requested_cpu;
  }

  public WorkerSummary setRequested_cpu(double requested_cpu) {
    this.requested_cpu = requested_cpu;
    setRequested_cpuIsSet(true);
    return this;
  }

  public void unsetRequested_cpu() {
    __isset_bit_vector.clear(__REQUESTED_CPU_ISSET_ID);
  }

  /** Returns true if field requested_cpu is set (has been assigned a value) and false otherwise */
  public boolean isSetRequested_cpu() {
    return __isset_bit_vector.get(__REQUESTED_CPU_ISSET_ID);
  }

  public void setRequested_cpuIsSet(boolean value) {
    __isset_bit_vector.set(__REQUESTED_CPU_ISSET_ID, value);
  }

  public double getAssigned_memonheap() {
    return this.assigned_memonheap;
  }

  public WorkerSummary setAssigned_memonheap(double assigned_memonheap) {
    this.assigned_memonheap = assigned_memonheap;
    setAssigned_memonheapIsSet(true);
    return this;
  }

  public void unsetAssigned_memonheap() {
    __isset_bit_vector.clear(__ASSIGNED_MEMONHEAP_ISSET_ID);
  }

  /** Returns true if field assigned_memonheap is set (has been assigned a value) and false otherwise */
  public boolean isSetAssigned_memonheap() {
    return __isset_bit_vector.get(__ASSIGNED_MEMONHEAP_ISSET_ID);
  }

  public void setAssigned_memonheapIsSet(boolean value) {
    __isset_bit_vector.set(__ASSIGNED_MEMONHEAP_ISSET_ID, value);
  }

  public double getAssigned_memoffheap() {
    return this.assigned_memoffheap;
  }

  public WorkerSummary setAssigned_memoffheap(double assigned_memoffheap) {
    this.assigned_memoffheap = assigned_memoffheap;
    setAssigned_memoffheapIsSet(true);
    return this;
  }

  public void unsetAssigned_memoffheap() {
    __isset_bit_vector.clear(__ASSIGNED_MEMOFFHEAP_ISSET_ID);
  }

  /** Returns true if field assigned_memoffheap is set (has been assigned a value) and false otherwise */
  public boolean isSetAssigned_memoffheap() {
    return __isset_bit_vector.get(__ASSIGNED_MEMOFFHEAP_ISSET_ID);
  }

  public void setAssigned_memoffheapIsSet(boolean value) {
    __isset_bit_vector.set(__ASSIGNED_MEMOFFHEAP_ISSET_ID, value);
  }

  public double getAssigned_cpu() {
    return this.assigned_cpu;
  }

  public WorkerSummary setAssigned_cpu(double assigned_cpu) {
    this.assigned_cpu = assigned_cpu;
    setAssigned_cpuIsSet(true);
    return this;
  }

  public void unsetAssigned_cpu() {
    __isset_bit_vector.clear(__ASSIGNED_CPU_ISSET_ID);
  }

  /** Returns true if field assigned_cpu is set (has been assigned a value) and false otherwise */
  public boolean isSetAssigned_cpu() {
    return __isset_bit_vector.get(__ASSIGNED_CPU_ISSET_ID);
  }

  public void setAssigned_cpuIsSet(boolean value) {
    __isset_bit_vector.set(__ASSIGNED_CPU_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case SUPERVISOR_ID:
      if (value == null) {
        unsetSupervisor_id();
      } else {
        setSupervisor_id((String)value);
      }
      break;

    case HOST:
      if (value == null) {
        unsetHost();
      } else {
        setHost((String)value);
      }
      break;

    case PORT:
      if (value == null) {
        unsetPort();
      } else {
        setPort((Integer)value);
      }
      break;

    case TOPOLOGY_ID:
      if (value == null) {
        unsetTopology_id();
      } else {
        setTopology_id((String)value);
      }
      break;

    case TOPOLOGY_NAME:
      if (value == null) {
        unsetTopology_name();
      } else {
        setTopology_name((String)value);
      }
      break;

    case NUM_EXECUTORS:
      if (value == null) {
        unsetNum_executors();
      } else {
        setNum_executors((Integer)value);
      }
      break;

    case COMPONENT_TO_NUM_TASKS:
      if (value == null) {
        unsetComponent_to_num_tasks();
      } else {
        setComponent_to_num_tasks((Map<String,Long>)value);
      }
      break;

    case TIME_SECS:
      if (value == null) {
        unsetTime_secs();
      } else {
        setTime_secs((Integer)value);
      }
      break;

    case UPTIME_SECS:
      if (value == null) {
        unsetUptime_secs();
      } else {
        setUptime_secs((Integer)value);
      }
      break;

    case REQUESTED_MEMONHEAP:
      if (value == null) {
        unsetRequested_memonheap();
      } else {
        setRequested_memonheap((Double)value);
      }
      break;

    case REQUESTED_MEMOFFHEAP:
      if (value == null) {
        unsetRequested_memoffheap();
      } else {
        setRequested_memoffheap((Double)value);
      }
      break;

    case REQUESTED_CPU:
      if (value == null) {
        unsetRequested_cpu();
      } else {
        setRequested_cpu((Double)value);
      }
      break;

    case ASSIGNED_MEMONHEAP:
      if (value == null) {
        unsetAssigned_memonheap();
      } else {
        setAssigned_memonheap((Double)value);
      }
      break;

    case ASSIGNED_MEMOFFHEAP:
      if (value == null) {
        unsetAssigned_memoffheap();
      } else {
        setAssigned_memoffheap((Double)value);
      }
      break;

    case ASSIGNED_CPU:
      if (value == null) {
        unsetAssigned_cpu();
      } else {
        setAssigned_cpu((Double)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case SUPERVISOR_ID:
      return getSupervisor_id();

    case HOST:
      return getHost();

    case PORT:
      return Integer.valueOf(getPort());

    case TOPOLOGY_ID:
      return getTopology_id();

    case TOPOLOGY_NAME:
      return getTopology_name();

    case NUM_EXECUTORS:
      return Integer.valueOf(getNum_executors());

    case COMPONENT_TO_NUM_TASKS:
      return getComponent_to_num_tasks();

    case TIME_SECS:
      return Integer.valueOf(getTime_secs());

    case UPTIME_SECS:
      return Integer.valueOf(getUptime_secs());

    case REQUESTED_MEMONHEAP:
      return Double.valueOf(getRequested_memonheap());

    case REQUESTED_MEMOFFHEAP:
      return Double.valueOf(getRequested_memoffheap());

    case REQUESTED_CPU:
      return Double.valueOf(getRequested_cpu());

    case ASSIGNED_MEMONHEAP:
      return Double.valueOf(getAssigned_memonheap());

    case ASSIGNED_MEMOFFHEAP:
      return Double.valueOf(getAssigned_memoffheap());

    case ASSIGNED_CPU:
      return Double.valueOf(getAssigned_cpu());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case SUPERVISOR_ID:
      return isSetSupervisor_id();
    case HOST:
      return isSetHost();
    case PORT:
      return isSetPort();
    case TOPOLOGY_ID:
      return isSetTopology_id();
    case TOPOLOGY_NAME:
      return isSetTopology_name();
    case NUM_EXECUTORS:
      return isSetNum_executors();
    case COMPONENT_TO_NUM_TASKS:
      return isSetComponent_to_num_tasks();
    case TIME_SECS:
      return isSetTime_secs();
    case UPTIME_SECS:
      return isSetUptime_secs();
    case REQUESTED_MEMONHEAP:
      return isSetRequested_memonheap();
    case REQUESTED_MEMOFFHEAP:
      return isSetRequested_memoffheap();
    case REQUESTED_CPU:
      return isSetRequested_cpu();
    case ASSIGNED_MEMONHEAP:
      return isSetAssigned_memonheap();
    case ASSIGNED_MEMOFFHEAP:
      return isSetAssigned_memoffheap();
    case ASSIGNED_CPU:
      return isSetAssigned_cpu();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof WorkerSummary)
      return this.equals((WorkerSummary)that);
    return false;
  }

  public boolean equals(WorkerSummary that) {
    if (that == null)
      return false;

    boolean this_present_supervisor_id = true && this.isSetSupervisor_id();
    boolean that_present_supervisor_id = true && that.isSetSupervisor_id();
    if (this_present_supervisor_id || that_present_supervisor_id) {
      if (!(this_present_supervisor_id && that_present_supervisor_id))
        return false;
      if (!this.supervisor_id.equals(that.supervisor_id))
        return false;
    }

    boolean this_present_host = true && this.isSetHost();
    boolean that_present_host = true && that.isSetHost();
    if (this_present_host || that_present_host) {
      if (!(this_present_host && that_present_host))
        return false;
      if (!this.host.equals(that.host))
        return false;
    }

    boolean this_present_port = true && this.isSetPort();
    boolean that_present_port = true && that.isSetPort();
    if (this_present_port || that_present_port) {
      if (!(this_present_port && that_present_port))
        return false;
      if (this.port != that.port)
        return false;
    }

    boolean this_present_topology_id = true && this.isSetTopology_id();
    boolean that_present_topology_id = true && that.isSetTopology_id();
    if (this_present_topology_id || that_present_topology_id) {
      if (!(this_present_topology_id && that_present_topology_id))
        return false;
      if (!this.topology_id.equals(that.topology_id))
        return false;
    }

    boolean this_present_topology_name = true && this.isSetTopology_name();
    boolean that_present_topology_name = true && that.isSetTopology_name();
    if (this_present_topology_name || that_present_topology_name) {
      if (!(this_present_topology_name && that_present_topology_name))
        return false;
      if (!this.topology_name.equals(that.topology_name))
        return false;
    }

    boolean this_present_num_executors = true && this.isSetNum_executors();
    boolean that_present_num_executors = true && that.isSetNum_executors();
    if (this_present_num_executors || that_present_num_executors) {
      if (!(this_present_num_executors && that_present_num_executors))
        return false;
      if (this.num_executors != that.num_executors)
        return false;
    }

    boolean this_present_component_to_num_tasks = true && this.isSetComponent_to_num_tasks();
    boolean that_present_component_to_num_tasks = true && that.isSetComponent_to_num_tasks();
    if (this_present_component_to_num_tasks || that_present_component_to_num_tasks) {
      if (!(this_present_component_to_num_tasks && that_present_component_to_num_tasks))
        return false;
      if (!this.component_to_num_tasks.equals(that.component_to_num_tasks))
        return false;
    }

    boolean this_present_time_secs = true && this.isSetTime_secs();
    boolean that_present_time_secs = true && that.isSetTime_secs();
    if (this_present_time_secs || that_present_time_secs) {
      if (!(this_present_time_secs && that_present_time_secs))
        return false;
      if (this.time_secs != that.time_secs)
        return false;
    }

    boolean this_present_uptime_secs = true && this.isSetUptime_secs();
    boolean that_present_uptime_secs = true && that.isSetUptime_secs();
    if (this_present_uptime_secs || that_present_uptime_secs) {
      if (!(this_present_uptime_secs && that_present_uptime_secs))
        return false;
      if (this.uptime_secs != that.uptime_secs)
        return false;
    }

    boolean this_present_requested_memonheap = true && this.isSetRequested_memonheap();
    boolean that_present_requested_memonheap = true && that.isSetRequested_memonheap();
    if (this_present_requested_memonheap || that_present_requested_memonheap) {
      if (!(this_present_requested_memonheap && that_present_requested_memonheap))
        return false;
      if (this.requested_memonheap != that.requested_memonheap)
        return false;
    }

    boolean this_present_requested_memoffheap = true && this.isSetRequested_memoffheap();
    boolean that_present_requested_memoffheap = true && that.isSetRequested_memoffheap();
    if (this_present_requested_memoffheap || that_present_requested_memoffheap) {
      if (!(this_present_requested_memoffheap && that_present_requested_memoffheap))
        return false;
      if (this.requested_memoffheap != that.requested_memoffheap)
        return false;
    }

    boolean this_present_requested_cpu = true && this.isSetRequested_cpu();
    boolean that_present_requested_cpu = true && that.isSetRequested_cpu();
    if (this_present_requested_cpu || that_present_requested_cpu) {
      if (!(this_present_requested_cpu && that_present_requested_cpu))
        return false;
      if (this.requested_cpu != that.requested_cpu)
        return false;
    }

    boolean this_present_assigned_memonheap = true && this.isSetAssigned_memonheap();
    boolean that_present_assigned_memonheap = true && that.isSetAssigned_memonheap();
    if (this_present_assigned_memonheap || that_present_assigned_memonheap) {
      if (!(this_present_assigned_memonheap && that_present_assigned_memonheap))
        return false;
      if (this.assigned_memonheap != that.assigned_memonheap)
        return false;
    }

    boolean this_present_assigned_memoffheap = true && this.isSetAssigned_memoffheap();
    boolean that_present_assigned_memoffheap = true && that.isSetAssigned_memoffheap();
    if (this_present_assigned_memoffheap || that_present_assigned_memoffheap) {
      if (!(this_present_assigned_memoffheap && that_present_assigned_memoffheap))
        return false;
      if (this.assigned_memoffheap != that.assigned_memoffheap)
        return false;
    }

    boolean this_present_assigned_cpu = true && this.isSetAssigned_cpu();
    boolean that_present_assigned_cpu = true && that.isSetAssigned_cpu();
    if (this_present_assigned_cpu || that_present_assigned_cpu) {
      if (!(this_present_assigned_cpu && that_present_assigned_cpu))
        return false;
      if (this.assigned_cpu != that.assigned_cpu)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(WorkerSummary other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    WorkerSummary typedOther = (WorkerSummary)other;

    lastComparison = Boolean.valueOf(isSetSupervisor_id()).compareTo(typedOther.isSetSupervisor_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSupervisor_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.supervisor_id, typedOther.supervisor_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHost()).compareTo(typedOther.isSetHost());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHost()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.host, typedOther.host);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPort()).compareTo(typedOther.isSetPort());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPort()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.port, typedOther.port);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTopology_id()).compareTo(typedOther.isSetTopology_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTopology_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.topology_id, typedOther.topology_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTopology_name()).compareTo(typedOther.isSetTopology_name());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTopology_name()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.topology_name, typedOther.topology_name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNum_executors()).compareTo(typedOther.isSetNum_executors());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNum_executors()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.num_executors, typedOther.num_executors);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetComponent_to_num_tasks()).compareTo(typedOther.isSetComponent_to_num_tasks());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetComponent_to_num_tasks()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.component_to_num_tasks, typedOther.component_to_num_tasks);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTime_secs()).compareTo(typedOther.isSetTime_secs());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTime_secs()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.time_secs, typedOther.time_secs);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUptime_secs()).compareTo(typedOther.isSetUptime_secs());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUptime_secs()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uptime_secs, typedOther.uptime_secs);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRequested_memonheap()).compareTo(typedOther.isSetRequested_memonheap());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRequested_memonheap()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.requested_memonheap, typedOther.requested_memonheap);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRequested_memoffheap()).compareTo(typedOther.isSetRequested_memoffheap());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRequested_memoffheap()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.requested_memoffheap, typedOther.requested_memoffheap);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRequested_cpu()).compareTo(typedOther.isSetRequested_cpu());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRequested_cpu()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.requested_cpu, typedOther.requested_cpu);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAssigned_memonheap()).compareTo(typedOther.isSetAssigned_memonheap());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAssigned_memonheap()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.assigned_memonheap, typedOther.assigned_memonheap);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAssigned_memoffheap()).compareTo(typedOther.isSetAssigned_memoffheap());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAssigned_memoffheap()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.assigned_memoffheap, typedOther.assigned_memoffheap);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAssigned_cpu()).compareTo(typedOther.isSetAssigned_cpu());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAssigned_cpu()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.assigned_cpu, typedOther.assigned_cpu);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("WorkerSummary(");
    boolean first = true;

    if (isSetSupervisor_id()) {
      sb.append("supervisor_id:");
      if (this.supervisor_id == null) {
        sb.append("null");
      } else {
        sb.append(this.supervisor_id);
      }
      first = false;
    }
    if (isSetHost()) {
      if (!first) sb.append(", ");
      sb.append("host:");
      if (this.host == null) {
        sb.append("null");
      } else {
        sb.append(this.host);
      }
      first = false;
    }
    if (isSetPort()) {
      if (!first) sb.append(", ");
      sb.append("port:");
      sb.append(this.port);
      first = false;
    }
    if (isSetTopology_id()) {
      if (!first) sb.append(", ");
      sb.append("topology_id:");
      if (this.topology_id == null) {
        sb.append("null");
      } else {
        sb.append(this.topology_id);
      }
      first = false;
    }
    if (isSetTopology_name()) {
      if (!first) sb.append(", ");
      sb.append("topology_name:");
      if (this.topology_name == null) {
        sb.append("null");
      } else {
        sb.append(this.topology_name);
      }
      first = false;
    }
    if (isSetNum_executors()) {
      if (!first) sb.append(", ");
      sb.append("num_executors:");
      sb.append(this.num_executors);
      first = false;
    }
    if (isSetComponent_to_num_tasks()) {
      if (!first) sb.append(", ");
      sb.append("component_to_num_tasks:");
      if (this.component_to_num_tasks == null) {
        sb.append("null");
      } else {
        sb.append(this.component_to_num_tasks);
      }
      first = false;
    }
    if (isSetTime_secs()) {
      if (!first) sb.append(", ");
      sb.append("time_secs:");
      sb.append(this.time_secs);
      first = false;
    }
    if (isSetUptime_secs()) {
      if (!first) sb.append(", ");
      sb.append("uptime_secs:");
      sb.append(this.uptime_secs);
      first = false;
    }
    if (isSetRequested_memonheap()) {
      if (!first) sb.append(", ");
      sb.append("requested_memonheap:");
      sb.append(this.requested_memonheap);
      first = false;
    }
    if (isSetRequested_memoffheap()) {
      if (!first) sb.append(", ");
      sb.append("requested_memoffheap:");
      sb.append(this.requested_memoffheap);
      first = false;
    }
    if (isSetRequested_cpu()) {
      if (!first) sb.append(", ");
      sb.append("requested_cpu:");
      sb.append(this.requested_cpu);
      first = false;
    }
    if (isSetAssigned_memonheap()) {
      if (!first) sb.append(", ");
      sb.append("assigned_memonheap:");
      sb.append(this.assigned_memonheap);
      first = false;
    }
    if (isSetAssigned_memoffheap()) {
      if (!first) sb.append(", ");
      sb.append("assigned_memoffheap:");
      sb.append(this.assigned_memoffheap);
      first = false;
    }
    if (isSetAssigned_cpu()) {
      if (!first) sb.append(", ");
      sb.append("assigned_cpu:");
      sb.append(this.assigned_cpu);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bit_vector = new BitSet(1);
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class WorkerSummaryStandardSchemeFactory implements SchemeFactory {
    public WorkerSummaryStandardScheme getScheme() {
      return new WorkerSummaryStandardScheme();
    }
  }

  private static class WorkerSummaryStandardScheme extends StandardScheme<WorkerSummary> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, WorkerSummary struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // SUPERVISOR_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.supervisor_id = iprot.readString();
              struct.setSupervisor_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // HOST
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.host = iprot.readString();
              struct.setHostIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // PORT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.port = iprot.readI32();
              struct.setPortIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // TOPOLOGY_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.topology_id = iprot.readString();
              struct.setTopology_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // TOPOLOGY_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.topology_name = iprot.readString();
              struct.setTopology_nameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // NUM_EXECUTORS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.num_executors = iprot.readI32();
              struct.setNum_executorsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // COMPONENT_TO_NUM_TASKS
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map428 = iprot.readMapBegin();
                struct.component_to_num_tasks = new HashMap<String,Long>(2*_map428.size);
                for (int _i429 = 0; _i429 < _map428.size; ++_i429)
                {
                  String _key430; // required
                  long _val431; // required
                  _key430 = iprot.readString();
                  _val431 = iprot.readI64();
                  struct.component_to_num_tasks.put(_key430, _val431);
                }
                iprot.readMapEnd();
              }
              struct.setComponent_to_num_tasksIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // TIME_SECS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.time_secs = iprot.readI32();
              struct.setTime_secsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // UPTIME_SECS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.uptime_secs = iprot.readI32();
              struct.setUptime_secsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 521: // REQUESTED_MEMONHEAP
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.requested_memonheap = iprot.readDouble();
              struct.setRequested_memonheapIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 522: // REQUESTED_MEMOFFHEAP
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.requested_memoffheap = iprot.readDouble();
              struct.setRequested_memoffheapIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 523: // REQUESTED_CPU
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.requested_cpu = iprot.readDouble();
              struct.setRequested_cpuIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 524: // ASSIGNED_MEMONHEAP
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.assigned_memonheap = iprot.readDouble();
              struct.setAssigned_memonheapIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 525: // ASSIGNED_MEMOFFHEAP
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.assigned_memoffheap = iprot.readDouble();
              struct.setAssigned_memoffheapIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 526: // ASSIGNED_CPU
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.assigned_cpu = iprot.readDouble();
              struct.setAssigned_cpuIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, WorkerSummary struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.supervisor_id != null) {
        if (struct.isSetSupervisor_id()) {
          oprot.writeFieldBegin(SUPERVISOR_ID_FIELD_DESC);
          oprot.writeString(struct.supervisor_id);
          oprot.writeFieldEnd();
        }
      }
      if (struct.host != null) {
        if (struct.isSetHost()) {
          oprot.writeFieldBegin(HOST_FIELD_DESC);
          oprot.writeString(struct.host);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetPort()) {
        oprot.writeFieldBegin(PORT_FIELD_DESC);
        oprot.writeI32(struct.port);
        oprot.writeFieldEnd();
      }
      if (struct.topology_id != null) {
        if (struct.isSetTopology_id()) {
          oprot.writeFieldBegin(TOPOLOGY_ID_FIELD_DESC);
          oprot.writeString(struct.topology_id);
          oprot.writeFieldEnd();
        }
      }
      if (struct.topology_name != null) {
        if (struct.isSetTopology_name()) {
          oprot.writeFieldBegin(TOPOLOGY_NAME_FIELD_DESC);
          oprot.writeString(struct.topology_name);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetNum_executors()) {
        oprot.writeFieldBegin(NUM_EXECUTORS_FIELD_DESC);
        oprot.writeI32(struct.num_executors);
        oprot.writeFieldEnd();
      }
      if (struct.component_to_num_tasks != null) {
        if (struct.isSetComponent_to_num_tasks()) {
          oprot.writeFieldBegin(COMPONENT_TO_NUM_TASKS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.I64, struct.component_to_num_tasks.size()));
            for (Map.Entry<String, Long> _iter432 : struct.component_to_num_tasks.entrySet())
            {
              oprot.writeString(_iter432.getKey());
              oprot.writeI64(_iter432.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetTime_secs()) {
        oprot.writeFieldBegin(TIME_SECS_FIELD_DESC);
        oprot.writeI32(struct.time_secs);
        oprot.writeFieldEnd();
      }
      if (struct.isSetUptime_secs()) {
        oprot.writeFieldBegin(UPTIME_SECS_FIELD_DESC);
        oprot.writeI32(struct.uptime_secs);
        oprot.writeFieldEnd();
      }
      if (struct.isSetRequested_memonheap()) {
        oprot.writeFieldBegin(REQUESTED_MEMONHEAP_FIELD_DESC);
        oprot.writeDouble(struct.requested_memonheap);
        oprot.writeFieldEnd();
      }
      if (struct.isSetRequested_memoffheap()) {
        oprot.writeFieldBegin(REQUESTED_MEMOFFHEAP_FIELD_DESC);
        oprot.writeDouble(struct.requested_memoffheap);
        oprot.writeFieldEnd();
      }
      if (struct.isSetRequested_cpu()) {
        oprot.writeFieldBegin(REQUESTED_CPU_FIELD_DESC);
        oprot.writeDouble(struct.requested_cpu);
        oprot.writeFieldEnd();
      }
      if (struct.isSetAssigned_memonheap()) {
        oprot.writeFieldBegin(ASSIGNED_MEMONHEAP_FIELD_DESC);
        oprot.writeDouble(struct.assigned_memonheap);
        oprot.writeFieldEnd();
      }
      if (struct.isSetAssigned_memoffheap()) {
        oprot.writeFieldBegin(ASSIGNED_MEMOFFHEAP_FIELD_DESC);
        oprot.writeDouble(struct.assigned_memoffheap);
        oprot.writeFieldEnd();
      }
      if (struct.isSetAssigned_cpu()) {
        oprot.writeFieldBegin(ASSIGNED_CPU_FIELD_DESC);
        oprot.writeDouble(struct.assigned_cpu);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class WorkerSummaryTupleSchemeFactory implements SchemeFactory {
    public WorkerSummaryTupleScheme getScheme() {
      return new WorkerSummaryTupleScheme();
    }
  }

  private static class WorkerSummaryTupleScheme extends TupleScheme<WorkerSummary> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, WorkerSummary struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetSupervisor_id()) {
        optionals.set(0);
      }
      if (struct.isSetHost()) {
        optionals.set(1);
      }
      if (struct.isSetPort()) {
        optionals.set(2);
      }
      if (struct.isSetTopology_id()) {
        optionals.set(3);
      }
      if (struct.isSetTopology_name()) {
        optionals.set(4);
      }
      if (struct.isSetNum_executors()) {
        optionals.set(5);
      }
      if (struct.isSetComponent_to_num_tasks()) {
        optionals.set(6);
      }
      if (struct.isSetTime_secs()) {
        optionals.set(7);
      }
      if (struct.isSetUptime_secs()) {
        optionals.set(8);
      }
      if (struct.isSetRequested_memonheap()) {
        optionals.set(9);
      }
      if (struct.isSetRequested_memoffheap()) {
        optionals.set(10);
      }
      if (struct.isSetRequested_cpu()) {
        optionals.set(11);
      }
      if (struct.isSetAssigned_memonheap()) {
        optionals.set(12);
      }
      if (struct.isSetAssigned_memoffheap()) {
        optionals.set(13);
      }
      if (struct.isSetAssigned_cpu()) {
        optionals.set(14);
      }
      oprot.writeBitSet(optionals, 15);
      if (struct.isSetSupervisor_id()) {
        oprot.writeString(struct.supervisor_id);
      }
      if (struct.isSetHost()) {
        oprot.writeString(struct.host);
      }
      if (struct.isSetPort()) {
        oprot.writeI32(struct.port);
      }
      if (struct.isSetTopology_id()) {
        oprot.writeString(struct.topology_id);
      }
      if (struct.isSetTopology_name()) {
        oprot.writeString(struct.topology_name);
      }
      if (struct.isSetNum_executors()) {
        oprot.writeI32(struct.num_executors);
      }
      if (struct.isSetComponent_to_num_tasks()) {
        {
          oprot.writeI32(struct.component_to_num_tasks.size());
          for (Map.Entry<String, Long> _iter433 : struct.component_to_num_tasks.entrySet())
          {
            oprot.writeString(_iter433.getKey());
            oprot.writeI64(_iter433.getValue());
          }
        }
      }
      if (struct.isSetTime_secs()) {
        oprot.writeI32(struct.time_secs);
      }
      if (struct.isSetUptime_secs()) {
        oprot.writeI32(struct.uptime_secs);
      }
      if (struct.isSetRequested_memonheap()) {
        oprot.writeDouble(struct.requested_memonheap);
      }
      if (struct.isSetRequested_memoffheap()) {
        oprot.writeDouble(struct.requested_memoffheap);
      }
      if (struct.isSetRequested_cpu()) {
        oprot.writeDouble(struct.requested_cpu);
      }
      if (struct.isSetAssigned_memonheap()) {
        oprot.writeDouble(struct.assigned_memonheap);
      }
      if (struct.isSetAssigned_memoffheap()) {
        oprot.writeDouble(struct.assigned_memoffheap);
      }
      if (struct.isSetAssigned_cpu()) {
        oprot.writeDouble(struct.assigned_cpu);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, WorkerSummary struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(15);
      if (incoming.get(0)) {
        struct.supervisor_id = iprot.readString();
        struct.setSupervisor_idIsSet(true);
      }
      if (incoming.get(1)) {
        struct.host = iprot.readString();
        struct.setHostIsSet(true);
      }
      if (incoming.get(2)) {
        struct.port = iprot.readI32();
        struct.setPortIsSet(true);
      }
      if (incoming.get(3)) {
        struct.topology_id = iprot.readString();
        struct.setTopology_idIsSet(true);
      }
      if (incoming.get(4)) {
        struct.topology_name = iprot.readString();
        struct.setTopology_nameIsSet(true);
      }
      if (incoming.get(5)) {
        struct.num_executors = iprot.readI32();
        struct.setNum_executorsIsSet(true);
      }
      if (incoming.get(6)) {
        {
          org.apache.thrift.protocol.TMap _map434 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.I64, iprot.readI32());
          struct.component_to_num_tasks = new HashMap<String,Long>(2*_map434.size);
          for (int _i435 = 0; _i435 < _map434.size; ++_i435)
          {
            String _key436; // required
            long _val437; // required
            _key436 = iprot.readString();
            _val437 = iprot.readI64();
            struct.component_to_num_tasks.put(_key436, _val437);
          }
        }
        struct.setComponent_to_num_tasksIsSet(true);
      }
      if (incoming.get(7)) {
        struct.time_secs = iprot.readI32();
        struct.setTime_secsIsSet(true);
      }
      if (incoming.get(8)) {
        struct.uptime_secs = iprot.readI32();
        struct.setUptime_secsIsSet(true);
      }
      if (incoming.get(9)) {
        struct.requested_memonheap = iprot.readDouble();
        struct.setRequested_memonheapIsSet(true);
      }
      if (incoming.get(10)) {
        struct.requested_memoffheap = iprot.readDouble();
        struct.setRequested_memoffheapIsSet(true);
      }
      if (incoming.get(11)) {
        struct.requested_cpu = iprot.readDouble();
        struct.setRequested_cpuIsSet(true);
      }
      if (incoming.get(12)) {
        struct.assigned_memonheap = iprot.readDouble();
        struct.setAssigned_memonheapIsSet(true);
      }
      if (incoming.get(13)) {
        struct.assigned_memoffheap = iprot.readDouble();
        struct.setAssigned_memoffheapIsSet(true);
      }
      if (incoming.get(14)) {
        struct.assigned_cpu = iprot.readDouble();
        struct.setAssigned_cpuIsSet(true);
      }
    }
  }

}

