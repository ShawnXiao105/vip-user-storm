/**
 * Autogenerated by Thrift Compiler (0.8.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.apache.storm.generated;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class TopologyStats implements org.apache.thrift.TBase<TopologyStats, TopologyStats._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TopologyStats");

  private static final org.apache.thrift.protocol.TField WINDOW_TO_EMITTED_FIELD_DESC = new org.apache.thrift.protocol.TField("window_to_emitted", org.apache.thrift.protocol.TType.MAP, (short)1);
  private static final org.apache.thrift.protocol.TField WINDOW_TO_TRANSFERRED_FIELD_DESC = new org.apache.thrift.protocol.TField("window_to_transferred", org.apache.thrift.protocol.TType.MAP, (short)2);
  private static final org.apache.thrift.protocol.TField WINDOW_TO_COMPLETE_LATENCIES_MS_FIELD_DESC = new org.apache.thrift.protocol.TField("window_to_complete_latencies_ms", org.apache.thrift.protocol.TType.MAP, (short)3);
  private static final org.apache.thrift.protocol.TField WINDOW_TO_ACKED_FIELD_DESC = new org.apache.thrift.protocol.TField("window_to_acked", org.apache.thrift.protocol.TType.MAP, (short)4);
  private static final org.apache.thrift.protocol.TField WINDOW_TO_FAILED_FIELD_DESC = new org.apache.thrift.protocol.TField("window_to_failed", org.apache.thrift.protocol.TType.MAP, (short)5);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TopologyStatsStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TopologyStatsTupleSchemeFactory());
  }

  public Map<String,Long> window_to_emitted; // required
  public Map<String,Long> window_to_transferred; // required
  public Map<String,Double> window_to_complete_latencies_ms; // required
  public Map<String,Long> window_to_acked; // required
  public Map<String,Long> window_to_failed; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    WINDOW_TO_EMITTED((short)1, "window_to_emitted"),
    WINDOW_TO_TRANSFERRED((short)2, "window_to_transferred"),
    WINDOW_TO_COMPLETE_LATENCIES_MS((short)3, "window_to_complete_latencies_ms"),
    WINDOW_TO_ACKED((short)4, "window_to_acked"),
    WINDOW_TO_FAILED((short)5, "window_to_failed");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // WINDOW_TO_EMITTED
          return WINDOW_TO_EMITTED;
        case 2: // WINDOW_TO_TRANSFERRED
          return WINDOW_TO_TRANSFERRED;
        case 3: // WINDOW_TO_COMPLETE_LATENCIES_MS
          return WINDOW_TO_COMPLETE_LATENCIES_MS;
        case 4: // WINDOW_TO_ACKED
          return WINDOW_TO_ACKED;
        case 5: // WINDOW_TO_FAILED
          return WINDOW_TO_FAILED;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private _Fields optionals[] = {_Fields.WINDOW_TO_EMITTED,_Fields.WINDOW_TO_TRANSFERRED,_Fields.WINDOW_TO_COMPLETE_LATENCIES_MS,_Fields.WINDOW_TO_ACKED,_Fields.WINDOW_TO_FAILED};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.WINDOW_TO_EMITTED, new org.apache.thrift.meta_data.FieldMetaData("window_to_emitted", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
    tmpMap.put(_Fields.WINDOW_TO_TRANSFERRED, new org.apache.thrift.meta_data.FieldMetaData("window_to_transferred", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
    tmpMap.put(_Fields.WINDOW_TO_COMPLETE_LATENCIES_MS, new org.apache.thrift.meta_data.FieldMetaData("window_to_complete_latencies_ms", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE))));
    tmpMap.put(_Fields.WINDOW_TO_ACKED, new org.apache.thrift.meta_data.FieldMetaData("window_to_acked", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
    tmpMap.put(_Fields.WINDOW_TO_FAILED, new org.apache.thrift.meta_data.FieldMetaData("window_to_failed", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TopologyStats.class, metaDataMap);
  }

  public TopologyStats() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TopologyStats(TopologyStats other) {
    if (other.isSetWindow_to_emitted()) {
      Map<String,Long> __this__window_to_emitted = new HashMap<String,Long>();
      for (Map.Entry<String, Long> other_element : other.window_to_emitted.entrySet()) {

        String other_element_key = other_element.getKey();
        Long other_element_value = other_element.getValue();

        String __this__window_to_emitted_copy_key = other_element_key;

        Long __this__window_to_emitted_copy_value = other_element_value;

        __this__window_to_emitted.put(__this__window_to_emitted_copy_key, __this__window_to_emitted_copy_value);
      }
      this.window_to_emitted = __this__window_to_emitted;
    }
    if (other.isSetWindow_to_transferred()) {
      Map<String,Long> __this__window_to_transferred = new HashMap<String,Long>();
      for (Map.Entry<String, Long> other_element : other.window_to_transferred.entrySet()) {

        String other_element_key = other_element.getKey();
        Long other_element_value = other_element.getValue();

        String __this__window_to_transferred_copy_key = other_element_key;

        Long __this__window_to_transferred_copy_value = other_element_value;

        __this__window_to_transferred.put(__this__window_to_transferred_copy_key, __this__window_to_transferred_copy_value);
      }
      this.window_to_transferred = __this__window_to_transferred;
    }
    if (other.isSetWindow_to_complete_latencies_ms()) {
      Map<String,Double> __this__window_to_complete_latencies_ms = new HashMap<String,Double>();
      for (Map.Entry<String, Double> other_element : other.window_to_complete_latencies_ms.entrySet()) {

        String other_element_key = other_element.getKey();
        Double other_element_value = other_element.getValue();

        String __this__window_to_complete_latencies_ms_copy_key = other_element_key;

        Double __this__window_to_complete_latencies_ms_copy_value = other_element_value;

        __this__window_to_complete_latencies_ms.put(__this__window_to_complete_latencies_ms_copy_key, __this__window_to_complete_latencies_ms_copy_value);
      }
      this.window_to_complete_latencies_ms = __this__window_to_complete_latencies_ms;
    }
    if (other.isSetWindow_to_acked()) {
      Map<String,Long> __this__window_to_acked = new HashMap<String,Long>();
      for (Map.Entry<String, Long> other_element : other.window_to_acked.entrySet()) {

        String other_element_key = other_element.getKey();
        Long other_element_value = other_element.getValue();

        String __this__window_to_acked_copy_key = other_element_key;

        Long __this__window_to_acked_copy_value = other_element_value;

        __this__window_to_acked.put(__this__window_to_acked_copy_key, __this__window_to_acked_copy_value);
      }
      this.window_to_acked = __this__window_to_acked;
    }
    if (other.isSetWindow_to_failed()) {
      Map<String,Long> __this__window_to_failed = new HashMap<String,Long>();
      for (Map.Entry<String, Long> other_element : other.window_to_failed.entrySet()) {

        String other_element_key = other_element.getKey();
        Long other_element_value = other_element.getValue();

        String __this__window_to_failed_copy_key = other_element_key;

        Long __this__window_to_failed_copy_value = other_element_value;

        __this__window_to_failed.put(__this__window_to_failed_copy_key, __this__window_to_failed_copy_value);
      }
      this.window_to_failed = __this__window_to_failed;
    }
  }

  public TopologyStats deepCopy() {
    return new TopologyStats(this);
  }

  @Override
  public void clear() {
    this.window_to_emitted = null;
    this.window_to_transferred = null;
    this.window_to_complete_latencies_ms = null;
    this.window_to_acked = null;
    this.window_to_failed = null;
  }

  public int getWindow_to_emittedSize() {
    return (this.window_to_emitted == null) ? 0 : this.window_to_emitted.size();
  }

  public void putToWindow_to_emitted(String key, long val) {
    if (this.window_to_emitted == null) {
      this.window_to_emitted = new HashMap<String,Long>();
    }
    this.window_to_emitted.put(key, val);
  }

  public Map<String,Long> getWindow_to_emitted() {
    return this.window_to_emitted;
  }

  public TopologyStats setWindow_to_emitted(Map<String,Long> window_to_emitted) {
    this.window_to_emitted = window_to_emitted;
    return this;
  }

  public void unsetWindow_to_emitted() {
    this.window_to_emitted = null;
  }

  /** Returns true if field window_to_emitted is set (has been assigned a value) and false otherwise */
  public boolean isSetWindow_to_emitted() {
    return this.window_to_emitted != null;
  }

  public void setWindow_to_emittedIsSet(boolean value) {
    if (!value) {
      this.window_to_emitted = null;
    }
  }

  public int getWindow_to_transferredSize() {
    return (this.window_to_transferred == null) ? 0 : this.window_to_transferred.size();
  }

  public void putToWindow_to_transferred(String key, long val) {
    if (this.window_to_transferred == null) {
      this.window_to_transferred = new HashMap<String,Long>();
    }
    this.window_to_transferred.put(key, val);
  }

  public Map<String,Long> getWindow_to_transferred() {
    return this.window_to_transferred;
  }

  public TopologyStats setWindow_to_transferred(Map<String,Long> window_to_transferred) {
    this.window_to_transferred = window_to_transferred;
    return this;
  }

  public void unsetWindow_to_transferred() {
    this.window_to_transferred = null;
  }

  /** Returns true if field window_to_transferred is set (has been assigned a value) and false otherwise */
  public boolean isSetWindow_to_transferred() {
    return this.window_to_transferred != null;
  }

  public void setWindow_to_transferredIsSet(boolean value) {
    if (!value) {
      this.window_to_transferred = null;
    }
  }

  public int getWindow_to_complete_latencies_msSize() {
    return (this.window_to_complete_latencies_ms == null) ? 0 : this.window_to_complete_latencies_ms.size();
  }

  public void putToWindow_to_complete_latencies_ms(String key, double val) {
    if (this.window_to_complete_latencies_ms == null) {
      this.window_to_complete_latencies_ms = new HashMap<String,Double>();
    }
    this.window_to_complete_latencies_ms.put(key, val);
  }

  public Map<String,Double> getWindow_to_complete_latencies_ms() {
    return this.window_to_complete_latencies_ms;
  }

  public TopologyStats setWindow_to_complete_latencies_ms(Map<String,Double> window_to_complete_latencies_ms) {
    this.window_to_complete_latencies_ms = window_to_complete_latencies_ms;
    return this;
  }

  public void unsetWindow_to_complete_latencies_ms() {
    this.window_to_complete_latencies_ms = null;
  }

  /** Returns true if field window_to_complete_latencies_ms is set (has been assigned a value) and false otherwise */
  public boolean isSetWindow_to_complete_latencies_ms() {
    return this.window_to_complete_latencies_ms != null;
  }

  public void setWindow_to_complete_latencies_msIsSet(boolean value) {
    if (!value) {
      this.window_to_complete_latencies_ms = null;
    }
  }

  public int getWindow_to_ackedSize() {
    return (this.window_to_acked == null) ? 0 : this.window_to_acked.size();
  }

  public void putToWindow_to_acked(String key, long val) {
    if (this.window_to_acked == null) {
      this.window_to_acked = new HashMap<String,Long>();
    }
    this.window_to_acked.put(key, val);
  }

  public Map<String,Long> getWindow_to_acked() {
    return this.window_to_acked;
  }

  public TopologyStats setWindow_to_acked(Map<String,Long> window_to_acked) {
    this.window_to_acked = window_to_acked;
    return this;
  }

  public void unsetWindow_to_acked() {
    this.window_to_acked = null;
  }

  /** Returns true if field window_to_acked is set (has been assigned a value) and false otherwise */
  public boolean isSetWindow_to_acked() {
    return this.window_to_acked != null;
  }

  public void setWindow_to_ackedIsSet(boolean value) {
    if (!value) {
      this.window_to_acked = null;
    }
  }

  public int getWindow_to_failedSize() {
    return (this.window_to_failed == null) ? 0 : this.window_to_failed.size();
  }

  public void putToWindow_to_failed(String key, long val) {
    if (this.window_to_failed == null) {
      this.window_to_failed = new HashMap<String,Long>();
    }
    this.window_to_failed.put(key, val);
  }

  public Map<String,Long> getWindow_to_failed() {
    return this.window_to_failed;
  }

  public TopologyStats setWindow_to_failed(Map<String,Long> window_to_failed) {
    this.window_to_failed = window_to_failed;
    return this;
  }

  public void unsetWindow_to_failed() {
    this.window_to_failed = null;
  }

  /** Returns true if field window_to_failed is set (has been assigned a value) and false otherwise */
  public boolean isSetWindow_to_failed() {
    return this.window_to_failed != null;
  }

  public void setWindow_to_failedIsSet(boolean value) {
    if (!value) {
      this.window_to_failed = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case WINDOW_TO_EMITTED:
      if (value == null) {
        unsetWindow_to_emitted();
      } else {
        setWindow_to_emitted((Map<String,Long>)value);
      }
      break;

    case WINDOW_TO_TRANSFERRED:
      if (value == null) {
        unsetWindow_to_transferred();
      } else {
        setWindow_to_transferred((Map<String,Long>)value);
      }
      break;

    case WINDOW_TO_COMPLETE_LATENCIES_MS:
      if (value == null) {
        unsetWindow_to_complete_latencies_ms();
      } else {
        setWindow_to_complete_latencies_ms((Map<String,Double>)value);
      }
      break;

    case WINDOW_TO_ACKED:
      if (value == null) {
        unsetWindow_to_acked();
      } else {
        setWindow_to_acked((Map<String,Long>)value);
      }
      break;

    case WINDOW_TO_FAILED:
      if (value == null) {
        unsetWindow_to_failed();
      } else {
        setWindow_to_failed((Map<String,Long>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case WINDOW_TO_EMITTED:
      return getWindow_to_emitted();

    case WINDOW_TO_TRANSFERRED:
      return getWindow_to_transferred();

    case WINDOW_TO_COMPLETE_LATENCIES_MS:
      return getWindow_to_complete_latencies_ms();

    case WINDOW_TO_ACKED:
      return getWindow_to_acked();

    case WINDOW_TO_FAILED:
      return getWindow_to_failed();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case WINDOW_TO_EMITTED:
      return isSetWindow_to_emitted();
    case WINDOW_TO_TRANSFERRED:
      return isSetWindow_to_transferred();
    case WINDOW_TO_COMPLETE_LATENCIES_MS:
      return isSetWindow_to_complete_latencies_ms();
    case WINDOW_TO_ACKED:
      return isSetWindow_to_acked();
    case WINDOW_TO_FAILED:
      return isSetWindow_to_failed();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TopologyStats)
      return this.equals((TopologyStats)that);
    return false;
  }

  public boolean equals(TopologyStats that) {
    if (that == null)
      return false;

    boolean this_present_window_to_emitted = true && this.isSetWindow_to_emitted();
    boolean that_present_window_to_emitted = true && that.isSetWindow_to_emitted();
    if (this_present_window_to_emitted || that_present_window_to_emitted) {
      if (!(this_present_window_to_emitted && that_present_window_to_emitted))
        return false;
      if (!this.window_to_emitted.equals(that.window_to_emitted))
        return false;
    }

    boolean this_present_window_to_transferred = true && this.isSetWindow_to_transferred();
    boolean that_present_window_to_transferred = true && that.isSetWindow_to_transferred();
    if (this_present_window_to_transferred || that_present_window_to_transferred) {
      if (!(this_present_window_to_transferred && that_present_window_to_transferred))
        return false;
      if (!this.window_to_transferred.equals(that.window_to_transferred))
        return false;
    }

    boolean this_present_window_to_complete_latencies_ms = true && this.isSetWindow_to_complete_latencies_ms();
    boolean that_present_window_to_complete_latencies_ms = true && that.isSetWindow_to_complete_latencies_ms();
    if (this_present_window_to_complete_latencies_ms || that_present_window_to_complete_latencies_ms) {
      if (!(this_present_window_to_complete_latencies_ms && that_present_window_to_complete_latencies_ms))
        return false;
      if (!this.window_to_complete_latencies_ms.equals(that.window_to_complete_latencies_ms))
        return false;
    }

    boolean this_present_window_to_acked = true && this.isSetWindow_to_acked();
    boolean that_present_window_to_acked = true && that.isSetWindow_to_acked();
    if (this_present_window_to_acked || that_present_window_to_acked) {
      if (!(this_present_window_to_acked && that_present_window_to_acked))
        return false;
      if (!this.window_to_acked.equals(that.window_to_acked))
        return false;
    }

    boolean this_present_window_to_failed = true && this.isSetWindow_to_failed();
    boolean that_present_window_to_failed = true && that.isSetWindow_to_failed();
    if (this_present_window_to_failed || that_present_window_to_failed) {
      if (!(this_present_window_to_failed && that_present_window_to_failed))
        return false;
      if (!this.window_to_failed.equals(that.window_to_failed))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(TopologyStats other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    TopologyStats typedOther = (TopologyStats)other;

    lastComparison = Boolean.valueOf(isSetWindow_to_emitted()).compareTo(typedOther.isSetWindow_to_emitted());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWindow_to_emitted()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.window_to_emitted, typedOther.window_to_emitted);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetWindow_to_transferred()).compareTo(typedOther.isSetWindow_to_transferred());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWindow_to_transferred()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.window_to_transferred, typedOther.window_to_transferred);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetWindow_to_complete_latencies_ms()).compareTo(typedOther.isSetWindow_to_complete_latencies_ms());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWindow_to_complete_latencies_ms()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.window_to_complete_latencies_ms, typedOther.window_to_complete_latencies_ms);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetWindow_to_acked()).compareTo(typedOther.isSetWindow_to_acked());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWindow_to_acked()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.window_to_acked, typedOther.window_to_acked);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetWindow_to_failed()).compareTo(typedOther.isSetWindow_to_failed());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWindow_to_failed()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.window_to_failed, typedOther.window_to_failed);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TopologyStats(");
    boolean first = true;

    if (isSetWindow_to_emitted()) {
      sb.append("window_to_emitted:");
      if (this.window_to_emitted == null) {
        sb.append("null");
      } else {
        sb.append(this.window_to_emitted);
      }
      first = false;
    }
    if (isSetWindow_to_transferred()) {
      if (!first) sb.append(", ");
      sb.append("window_to_transferred:");
      if (this.window_to_transferred == null) {
        sb.append("null");
      } else {
        sb.append(this.window_to_transferred);
      }
      first = false;
    }
    if (isSetWindow_to_complete_latencies_ms()) {
      if (!first) sb.append(", ");
      sb.append("window_to_complete_latencies_ms:");
      if (this.window_to_complete_latencies_ms == null) {
        sb.append("null");
      } else {
        sb.append(this.window_to_complete_latencies_ms);
      }
      first = false;
    }
    if (isSetWindow_to_acked()) {
      if (!first) sb.append(", ");
      sb.append("window_to_acked:");
      if (this.window_to_acked == null) {
        sb.append("null");
      } else {
        sb.append(this.window_to_acked);
      }
      first = false;
    }
    if (isSetWindow_to_failed()) {
      if (!first) sb.append(", ");
      sb.append("window_to_failed:");
      if (this.window_to_failed == null) {
        sb.append("null");
      } else {
        sb.append(this.window_to_failed);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TopologyStatsStandardSchemeFactory implements SchemeFactory {
    public TopologyStatsStandardScheme getScheme() {
      return new TopologyStatsStandardScheme();
    }
  }

  private static class TopologyStatsStandardScheme extends StandardScheme<TopologyStats> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TopologyStats struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // WINDOW_TO_EMITTED
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map378 = iprot.readMapBegin();
                struct.window_to_emitted = new HashMap<String,Long>(2*_map378.size);
                for (int _i379 = 0; _i379 < _map378.size; ++_i379)
                {
                  String _key380; // required
                  long _val381; // required
                  _key380 = iprot.readString();
                  _val381 = iprot.readI64();
                  struct.window_to_emitted.put(_key380, _val381);
                }
                iprot.readMapEnd();
              }
              struct.setWindow_to_emittedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // WINDOW_TO_TRANSFERRED
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map382 = iprot.readMapBegin();
                struct.window_to_transferred = new HashMap<String,Long>(2*_map382.size);
                for (int _i383 = 0; _i383 < _map382.size; ++_i383)
                {
                  String _key384; // required
                  long _val385; // required
                  _key384 = iprot.readString();
                  _val385 = iprot.readI64();
                  struct.window_to_transferred.put(_key384, _val385);
                }
                iprot.readMapEnd();
              }
              struct.setWindow_to_transferredIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // WINDOW_TO_COMPLETE_LATENCIES_MS
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map386 = iprot.readMapBegin();
                struct.window_to_complete_latencies_ms = new HashMap<String,Double>(2*_map386.size);
                for (int _i387 = 0; _i387 < _map386.size; ++_i387)
                {
                  String _key388; // required
                  double _val389; // required
                  _key388 = iprot.readString();
                  _val389 = iprot.readDouble();
                  struct.window_to_complete_latencies_ms.put(_key388, _val389);
                }
                iprot.readMapEnd();
              }
              struct.setWindow_to_complete_latencies_msIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // WINDOW_TO_ACKED
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map390 = iprot.readMapBegin();
                struct.window_to_acked = new HashMap<String,Long>(2*_map390.size);
                for (int _i391 = 0; _i391 < _map390.size; ++_i391)
                {
                  String _key392; // required
                  long _val393; // required
                  _key392 = iprot.readString();
                  _val393 = iprot.readI64();
                  struct.window_to_acked.put(_key392, _val393);
                }
                iprot.readMapEnd();
              }
              struct.setWindow_to_ackedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // WINDOW_TO_FAILED
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map394 = iprot.readMapBegin();
                struct.window_to_failed = new HashMap<String,Long>(2*_map394.size);
                for (int _i395 = 0; _i395 < _map394.size; ++_i395)
                {
                  String _key396; // required
                  long _val397; // required
                  _key396 = iprot.readString();
                  _val397 = iprot.readI64();
                  struct.window_to_failed.put(_key396, _val397);
                }
                iprot.readMapEnd();
              }
              struct.setWindow_to_failedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TopologyStats struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.window_to_emitted != null) {
        if (struct.isSetWindow_to_emitted()) {
          oprot.writeFieldBegin(WINDOW_TO_EMITTED_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.I64, struct.window_to_emitted.size()));
            for (Map.Entry<String, Long> _iter398 : struct.window_to_emitted.entrySet())
            {
              oprot.writeString(_iter398.getKey());
              oprot.writeI64(_iter398.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.window_to_transferred != null) {
        if (struct.isSetWindow_to_transferred()) {
          oprot.writeFieldBegin(WINDOW_TO_TRANSFERRED_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.I64, struct.window_to_transferred.size()));
            for (Map.Entry<String, Long> _iter399 : struct.window_to_transferred.entrySet())
            {
              oprot.writeString(_iter399.getKey());
              oprot.writeI64(_iter399.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.window_to_complete_latencies_ms != null) {
        if (struct.isSetWindow_to_complete_latencies_ms()) {
          oprot.writeFieldBegin(WINDOW_TO_COMPLETE_LATENCIES_MS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.DOUBLE, struct.window_to_complete_latencies_ms.size()));
            for (Map.Entry<String, Double> _iter400 : struct.window_to_complete_latencies_ms.entrySet())
            {
              oprot.writeString(_iter400.getKey());
              oprot.writeDouble(_iter400.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.window_to_acked != null) {
        if (struct.isSetWindow_to_acked()) {
          oprot.writeFieldBegin(WINDOW_TO_ACKED_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.I64, struct.window_to_acked.size()));
            for (Map.Entry<String, Long> _iter401 : struct.window_to_acked.entrySet())
            {
              oprot.writeString(_iter401.getKey());
              oprot.writeI64(_iter401.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.window_to_failed != null) {
        if (struct.isSetWindow_to_failed()) {
          oprot.writeFieldBegin(WINDOW_TO_FAILED_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.I64, struct.window_to_failed.size()));
            for (Map.Entry<String, Long> _iter402 : struct.window_to_failed.entrySet())
            {
              oprot.writeString(_iter402.getKey());
              oprot.writeI64(_iter402.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TopologyStatsTupleSchemeFactory implements SchemeFactory {
    public TopologyStatsTupleScheme getScheme() {
      return new TopologyStatsTupleScheme();
    }
  }

  private static class TopologyStatsTupleScheme extends TupleScheme<TopologyStats> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TopologyStats struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetWindow_to_emitted()) {
        optionals.set(0);
      }
      if (struct.isSetWindow_to_transferred()) {
        optionals.set(1);
      }
      if (struct.isSetWindow_to_complete_latencies_ms()) {
        optionals.set(2);
      }
      if (struct.isSetWindow_to_acked()) {
        optionals.set(3);
      }
      if (struct.isSetWindow_to_failed()) {
        optionals.set(4);
      }
      oprot.writeBitSet(optionals, 5);
      if (struct.isSetWindow_to_emitted()) {
        {
          oprot.writeI32(struct.window_to_emitted.size());
          for (Map.Entry<String, Long> _iter403 : struct.window_to_emitted.entrySet())
          {
            oprot.writeString(_iter403.getKey());
            oprot.writeI64(_iter403.getValue());
          }
        }
      }
      if (struct.isSetWindow_to_transferred()) {
        {
          oprot.writeI32(struct.window_to_transferred.size());
          for (Map.Entry<String, Long> _iter404 : struct.window_to_transferred.entrySet())
          {
            oprot.writeString(_iter404.getKey());
            oprot.writeI64(_iter404.getValue());
          }
        }
      }
      if (struct.isSetWindow_to_complete_latencies_ms()) {
        {
          oprot.writeI32(struct.window_to_complete_latencies_ms.size());
          for (Map.Entry<String, Double> _iter405 : struct.window_to_complete_latencies_ms.entrySet())
          {
            oprot.writeString(_iter405.getKey());
            oprot.writeDouble(_iter405.getValue());
          }
        }
      }
      if (struct.isSetWindow_to_acked()) {
        {
          oprot.writeI32(struct.window_to_acked.size());
          for (Map.Entry<String, Long> _iter406 : struct.window_to_acked.entrySet())
          {
            oprot.writeString(_iter406.getKey());
            oprot.writeI64(_iter406.getValue());
          }
        }
      }
      if (struct.isSetWindow_to_failed()) {
        {
          oprot.writeI32(struct.window_to_failed.size());
          for (Map.Entry<String, Long> _iter407 : struct.window_to_failed.entrySet())
          {
            oprot.writeString(_iter407.getKey());
            oprot.writeI64(_iter407.getValue());
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TopologyStats struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(5);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TMap _map408 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.I64, iprot.readI32());
          struct.window_to_emitted = new HashMap<String,Long>(2*_map408.size);
          for (int _i409 = 0; _i409 < _map408.size; ++_i409)
          {
            String _key410; // required
            long _val411; // required
            _key410 = iprot.readString();
            _val411 = iprot.readI64();
            struct.window_to_emitted.put(_key410, _val411);
          }
        }
        struct.setWindow_to_emittedIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TMap _map412 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.I64, iprot.readI32());
          struct.window_to_transferred = new HashMap<String,Long>(2*_map412.size);
          for (int _i413 = 0; _i413 < _map412.size; ++_i413)
          {
            String _key414; // required
            long _val415; // required
            _key414 = iprot.readString();
            _val415 = iprot.readI64();
            struct.window_to_transferred.put(_key414, _val415);
          }
        }
        struct.setWindow_to_transferredIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TMap _map416 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.DOUBLE, iprot.readI32());
          struct.window_to_complete_latencies_ms = new HashMap<String,Double>(2*_map416.size);
          for (int _i417 = 0; _i417 < _map416.size; ++_i417)
          {
            String _key418; // required
            double _val419; // required
            _key418 = iprot.readString();
            _val419 = iprot.readDouble();
            struct.window_to_complete_latencies_ms.put(_key418, _val419);
          }
        }
        struct.setWindow_to_complete_latencies_msIsSet(true);
      }
      if (incoming.get(3)) {
        {
          org.apache.thrift.protocol.TMap _map420 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.I64, iprot.readI32());
          struct.window_to_acked = new HashMap<String,Long>(2*_map420.size);
          for (int _i421 = 0; _i421 < _map420.size; ++_i421)
          {
            String _key422; // required
            long _val423; // required
            _key422 = iprot.readString();
            _val423 = iprot.readI64();
            struct.window_to_acked.put(_key422, _val423);
          }
        }
        struct.setWindow_to_ackedIsSet(true);
      }
      if (incoming.get(4)) {
        {
          org.apache.thrift.protocol.TMap _map424 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.I64, iprot.readI32());
          struct.window_to_failed = new HashMap<String,Long>(2*_map424.size);
          for (int _i425 = 0; _i425 < _map424.size; ++_i425)
          {
            String _key426; // required
            long _val427; // required
            _key426 = iprot.readString();
            _val427 = iprot.readI64();
            struct.window_to_failed.put(_key426, _val427);
          }
        }
        struct.setWindow_to_failedIsSet(true);
      }
    }
  }

}

