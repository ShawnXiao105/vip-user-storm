/**
 * Autogenerated by Thrift Compiler (0.8.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.apache.storm.generated;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class Assignment implements org.apache.thrift.TBase<Assignment, Assignment._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Assignment");

  private static final org.apache.thrift.protocol.TField MASTER_CODE_DIR_FIELD_DESC = new org.apache.thrift.protocol.TField("master_code_dir", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField NODE_HOST_FIELD_DESC = new org.apache.thrift.protocol.TField("node_host", org.apache.thrift.protocol.TType.MAP, (short)2);
  private static final org.apache.thrift.protocol.TField EXECUTOR_NODE_PORT_FIELD_DESC = new org.apache.thrift.protocol.TField("executor_node_port", org.apache.thrift.protocol.TType.MAP, (short)3);
  private static final org.apache.thrift.protocol.TField EXECUTOR_START_TIME_SECS_FIELD_DESC = new org.apache.thrift.protocol.TField("executor_start_time_secs", org.apache.thrift.protocol.TType.MAP, (short)4);
  private static final org.apache.thrift.protocol.TField WORKER_RESOURCES_FIELD_DESC = new org.apache.thrift.protocol.TField("worker_resources", org.apache.thrift.protocol.TType.MAP, (short)5);
  private static final org.apache.thrift.protocol.TField OWNER_FIELD_DESC = new org.apache.thrift.protocol.TField("owner", org.apache.thrift.protocol.TType.STRING, (short)7);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new AssignmentStandardSchemeFactory());
    schemes.put(TupleScheme.class, new AssignmentTupleSchemeFactory());
  }

  public String master_code_dir; // required
  public Map<String,String> node_host; // required
  public Map<List<Long>,NodeInfo> executor_node_port; // required
  public Map<List<Long>,Long> executor_start_time_secs; // required
  public Map<NodeInfo,WorkerResources> worker_resources; // required
  public String owner; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    MASTER_CODE_DIR((short)1, "master_code_dir"),
    NODE_HOST((short)2, "node_host"),
    EXECUTOR_NODE_PORT((short)3, "executor_node_port"),
    EXECUTOR_START_TIME_SECS((short)4, "executor_start_time_secs"),
    WORKER_RESOURCES((short)5, "worker_resources"),
    OWNER((short)7, "owner");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // MASTER_CODE_DIR
          return MASTER_CODE_DIR;
        case 2: // NODE_HOST
          return NODE_HOST;
        case 3: // EXECUTOR_NODE_PORT
          return EXECUTOR_NODE_PORT;
        case 4: // EXECUTOR_START_TIME_SECS
          return EXECUTOR_START_TIME_SECS;
        case 5: // WORKER_RESOURCES
          return WORKER_RESOURCES;
        case 7: // OWNER
          return OWNER;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private _Fields optionals[] = {_Fields.NODE_HOST,_Fields.EXECUTOR_NODE_PORT,_Fields.EXECUTOR_START_TIME_SECS,_Fields.WORKER_RESOURCES,_Fields.OWNER};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.MASTER_CODE_DIR, new org.apache.thrift.meta_data.FieldMetaData("master_code_dir", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NODE_HOST, new org.apache.thrift.meta_data.FieldMetaData("node_host", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.EXECUTOR_NODE_PORT, new org.apache.thrift.meta_data.FieldMetaData("executor_node_port", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)), 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, NodeInfo.class))));
    tmpMap.put(_Fields.EXECUTOR_START_TIME_SECS, new org.apache.thrift.meta_data.FieldMetaData("executor_start_time_secs", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
    tmpMap.put(_Fields.WORKER_RESOURCES, new org.apache.thrift.meta_data.FieldMetaData("worker_resources", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, NodeInfo.class), 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, WorkerResources.class))));
    tmpMap.put(_Fields.OWNER, new org.apache.thrift.meta_data.FieldMetaData("owner", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Assignment.class, metaDataMap);
  }

  public Assignment() {
    this.node_host = new HashMap<String,String>();

    this.executor_node_port = new HashMap<List<Long>,NodeInfo>();

    this.executor_start_time_secs = new HashMap<List<Long>,Long>();

    this.worker_resources = new HashMap<NodeInfo,WorkerResources>();

  }

  public Assignment(
    String master_code_dir)
  {
    this();
    this.master_code_dir = master_code_dir;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Assignment(Assignment other) {
    if (other.isSetMaster_code_dir()) {
      this.master_code_dir = other.master_code_dir;
    }
    if (other.isSetNode_host()) {
      Map<String,String> __this__node_host = new HashMap<String,String>();
      for (Map.Entry<String, String> other_element : other.node_host.entrySet()) {

        String other_element_key = other_element.getKey();
        String other_element_value = other_element.getValue();

        String __this__node_host_copy_key = other_element_key;

        String __this__node_host_copy_value = other_element_value;

        __this__node_host.put(__this__node_host_copy_key, __this__node_host_copy_value);
      }
      this.node_host = __this__node_host;
    }
    if (other.isSetExecutor_node_port()) {
      Map<List<Long>,NodeInfo> __this__executor_node_port = new HashMap<List<Long>,NodeInfo>();
      for (Map.Entry<List<Long>, NodeInfo> other_element : other.executor_node_port.entrySet()) {

        List<Long> other_element_key = other_element.getKey();
        NodeInfo other_element_value = other_element.getValue();

        List<Long> __this__executor_node_port_copy_key = new ArrayList<Long>();
        for (Long other_element_key_element : other_element_key) {
          __this__executor_node_port_copy_key.add(other_element_key_element);
        }

        NodeInfo __this__executor_node_port_copy_value = new NodeInfo(other_element_value);

        __this__executor_node_port.put(__this__executor_node_port_copy_key, __this__executor_node_port_copy_value);
      }
      this.executor_node_port = __this__executor_node_port;
    }
    if (other.isSetExecutor_start_time_secs()) {
      Map<List<Long>,Long> __this__executor_start_time_secs = new HashMap<List<Long>,Long>();
      for (Map.Entry<List<Long>, Long> other_element : other.executor_start_time_secs.entrySet()) {

        List<Long> other_element_key = other_element.getKey();
        Long other_element_value = other_element.getValue();

        List<Long> __this__executor_start_time_secs_copy_key = new ArrayList<Long>();
        for (Long other_element_key_element : other_element_key) {
          __this__executor_start_time_secs_copy_key.add(other_element_key_element);
        }

        Long __this__executor_start_time_secs_copy_value = other_element_value;

        __this__executor_start_time_secs.put(__this__executor_start_time_secs_copy_key, __this__executor_start_time_secs_copy_value);
      }
      this.executor_start_time_secs = __this__executor_start_time_secs;
    }
    if (other.isSetWorker_resources()) {
      Map<NodeInfo,WorkerResources> __this__worker_resources = new HashMap<NodeInfo,WorkerResources>();
      for (Map.Entry<NodeInfo, WorkerResources> other_element : other.worker_resources.entrySet()) {

        NodeInfo other_element_key = other_element.getKey();
        WorkerResources other_element_value = other_element.getValue();

        NodeInfo __this__worker_resources_copy_key = new NodeInfo(other_element_key);

        WorkerResources __this__worker_resources_copy_value = new WorkerResources(other_element_value);

        __this__worker_resources.put(__this__worker_resources_copy_key, __this__worker_resources_copy_value);
      }
      this.worker_resources = __this__worker_resources;
    }
    if (other.isSetOwner()) {
      this.owner = other.owner;
    }
  }

  public Assignment deepCopy() {
    return new Assignment(this);
  }

  @Override
  public void clear() {
    this.master_code_dir = null;
    this.node_host = new HashMap<String,String>();

    this.executor_node_port = new HashMap<List<Long>,NodeInfo>();

    this.executor_start_time_secs = new HashMap<List<Long>,Long>();

    this.worker_resources = new HashMap<NodeInfo,WorkerResources>();

    this.owner = null;
  }

  public String getMaster_code_dir() {
    return this.master_code_dir;
  }

  public Assignment setMaster_code_dir(String master_code_dir) {
    this.master_code_dir = master_code_dir;
    return this;
  }

  public void unsetMaster_code_dir() {
    this.master_code_dir = null;
  }

  /** Returns true if field master_code_dir is set (has been assigned a value) and false otherwise */
  public boolean isSetMaster_code_dir() {
    return this.master_code_dir != null;
  }

  public void setMaster_code_dirIsSet(boolean value) {
    if (!value) {
      this.master_code_dir = null;
    }
  }

  public int getNode_hostSize() {
    return (this.node_host == null) ? 0 : this.node_host.size();
  }

  public void putToNode_host(String key, String val) {
    if (this.node_host == null) {
      this.node_host = new HashMap<String,String>();
    }
    this.node_host.put(key, val);
  }

  public Map<String,String> getNode_host() {
    return this.node_host;
  }

  public Assignment setNode_host(Map<String,String> node_host) {
    this.node_host = node_host;
    return this;
  }

  public void unsetNode_host() {
    this.node_host = null;
  }

  /** Returns true if field node_host is set (has been assigned a value) and false otherwise */
  public boolean isSetNode_host() {
    return this.node_host != null;
  }

  public void setNode_hostIsSet(boolean value) {
    if (!value) {
      this.node_host = null;
    }
  }

  public int getExecutor_node_portSize() {
    return (this.executor_node_port == null) ? 0 : this.executor_node_port.size();
  }

  public void putToExecutor_node_port(List<Long> key, NodeInfo val) {
    if (this.executor_node_port == null) {
      this.executor_node_port = new HashMap<List<Long>,NodeInfo>();
    }
    this.executor_node_port.put(key, val);
  }

  public Map<List<Long>,NodeInfo> getExecutor_node_port() {
    return this.executor_node_port;
  }

  public Assignment setExecutor_node_port(Map<List<Long>,NodeInfo> executor_node_port) {
    this.executor_node_port = executor_node_port;
    return this;
  }

  public void unsetExecutor_node_port() {
    this.executor_node_port = null;
  }

  /** Returns true if field executor_node_port is set (has been assigned a value) and false otherwise */
  public boolean isSetExecutor_node_port() {
    return this.executor_node_port != null;
  }

  public void setExecutor_node_portIsSet(boolean value) {
    if (!value) {
      this.executor_node_port = null;
    }
  }

  public int getExecutor_start_time_secsSize() {
    return (this.executor_start_time_secs == null) ? 0 : this.executor_start_time_secs.size();
  }

  public void putToExecutor_start_time_secs(List<Long> key, long val) {
    if (this.executor_start_time_secs == null) {
      this.executor_start_time_secs = new HashMap<List<Long>,Long>();
    }
    this.executor_start_time_secs.put(key, val);
  }

  public Map<List<Long>,Long> getExecutor_start_time_secs() {
    return this.executor_start_time_secs;
  }

  public Assignment setExecutor_start_time_secs(Map<List<Long>,Long> executor_start_time_secs) {
    this.executor_start_time_secs = executor_start_time_secs;
    return this;
  }

  public void unsetExecutor_start_time_secs() {
    this.executor_start_time_secs = null;
  }

  /** Returns true if field executor_start_time_secs is set (has been assigned a value) and false otherwise */
  public boolean isSetExecutor_start_time_secs() {
    return this.executor_start_time_secs != null;
  }

  public void setExecutor_start_time_secsIsSet(boolean value) {
    if (!value) {
      this.executor_start_time_secs = null;
    }
  }

  public int getWorker_resourcesSize() {
    return (this.worker_resources == null) ? 0 : this.worker_resources.size();
  }

  public void putToWorker_resources(NodeInfo key, WorkerResources val) {
    if (this.worker_resources == null) {
      this.worker_resources = new HashMap<NodeInfo,WorkerResources>();
    }
    this.worker_resources.put(key, val);
  }

  public Map<NodeInfo,WorkerResources> getWorker_resources() {
    return this.worker_resources;
  }

  public Assignment setWorker_resources(Map<NodeInfo,WorkerResources> worker_resources) {
    this.worker_resources = worker_resources;
    return this;
  }

  public void unsetWorker_resources() {
    this.worker_resources = null;
  }

  /** Returns true if field worker_resources is set (has been assigned a value) and false otherwise */
  public boolean isSetWorker_resources() {
    return this.worker_resources != null;
  }

  public void setWorker_resourcesIsSet(boolean value) {
    if (!value) {
      this.worker_resources = null;
    }
  }

  public String getOwner() {
    return this.owner;
  }

  public Assignment setOwner(String owner) {
    this.owner = owner;
    return this;
  }

  public void unsetOwner() {
    this.owner = null;
  }

  /** Returns true if field owner is set (has been assigned a value) and false otherwise */
  public boolean isSetOwner() {
    return this.owner != null;
  }

  public void setOwnerIsSet(boolean value) {
    if (!value) {
      this.owner = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case MASTER_CODE_DIR:
      if (value == null) {
        unsetMaster_code_dir();
      } else {
        setMaster_code_dir((String)value);
      }
      break;

    case NODE_HOST:
      if (value == null) {
        unsetNode_host();
      } else {
        setNode_host((Map<String,String>)value);
      }
      break;

    case EXECUTOR_NODE_PORT:
      if (value == null) {
        unsetExecutor_node_port();
      } else {
        setExecutor_node_port((Map<List<Long>,NodeInfo>)value);
      }
      break;

    case EXECUTOR_START_TIME_SECS:
      if (value == null) {
        unsetExecutor_start_time_secs();
      } else {
        setExecutor_start_time_secs((Map<List<Long>,Long>)value);
      }
      break;

    case WORKER_RESOURCES:
      if (value == null) {
        unsetWorker_resources();
      } else {
        setWorker_resources((Map<NodeInfo,WorkerResources>)value);
      }
      break;

    case OWNER:
      if (value == null) {
        unsetOwner();
      } else {
        setOwner((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case MASTER_CODE_DIR:
      return getMaster_code_dir();

    case NODE_HOST:
      return getNode_host();

    case EXECUTOR_NODE_PORT:
      return getExecutor_node_port();

    case EXECUTOR_START_TIME_SECS:
      return getExecutor_start_time_secs();

    case WORKER_RESOURCES:
      return getWorker_resources();

    case OWNER:
      return getOwner();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case MASTER_CODE_DIR:
      return isSetMaster_code_dir();
    case NODE_HOST:
      return isSetNode_host();
    case EXECUTOR_NODE_PORT:
      return isSetExecutor_node_port();
    case EXECUTOR_START_TIME_SECS:
      return isSetExecutor_start_time_secs();
    case WORKER_RESOURCES:
      return isSetWorker_resources();
    case OWNER:
      return isSetOwner();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Assignment)
      return this.equals((Assignment)that);
    return false;
  }

  public boolean equals(Assignment that) {
    if (that == null)
      return false;

    boolean this_present_master_code_dir = true && this.isSetMaster_code_dir();
    boolean that_present_master_code_dir = true && that.isSetMaster_code_dir();
    if (this_present_master_code_dir || that_present_master_code_dir) {
      if (!(this_present_master_code_dir && that_present_master_code_dir))
        return false;
      if (!this.master_code_dir.equals(that.master_code_dir))
        return false;
    }

    boolean this_present_node_host = true && this.isSetNode_host();
    boolean that_present_node_host = true && that.isSetNode_host();
    if (this_present_node_host || that_present_node_host) {
      if (!(this_present_node_host && that_present_node_host))
        return false;
      if (!this.node_host.equals(that.node_host))
        return false;
    }

    boolean this_present_executor_node_port = true && this.isSetExecutor_node_port();
    boolean that_present_executor_node_port = true && that.isSetExecutor_node_port();
    if (this_present_executor_node_port || that_present_executor_node_port) {
      if (!(this_present_executor_node_port && that_present_executor_node_port))
        return false;
      if (!this.executor_node_port.equals(that.executor_node_port))
        return false;
    }

    boolean this_present_executor_start_time_secs = true && this.isSetExecutor_start_time_secs();
    boolean that_present_executor_start_time_secs = true && that.isSetExecutor_start_time_secs();
    if (this_present_executor_start_time_secs || that_present_executor_start_time_secs) {
      if (!(this_present_executor_start_time_secs && that_present_executor_start_time_secs))
        return false;
      if (!this.executor_start_time_secs.equals(that.executor_start_time_secs))
        return false;
    }

    boolean this_present_worker_resources = true && this.isSetWorker_resources();
    boolean that_present_worker_resources = true && that.isSetWorker_resources();
    if (this_present_worker_resources || that_present_worker_resources) {
      if (!(this_present_worker_resources && that_present_worker_resources))
        return false;
      if (!this.worker_resources.equals(that.worker_resources))
        return false;
    }

    boolean this_present_owner = true && this.isSetOwner();
    boolean that_present_owner = true && that.isSetOwner();
    if (this_present_owner || that_present_owner) {
      if (!(this_present_owner && that_present_owner))
        return false;
      if (!this.owner.equals(that.owner))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(Assignment other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    Assignment typedOther = (Assignment)other;

    lastComparison = Boolean.valueOf(isSetMaster_code_dir()).compareTo(typedOther.isSetMaster_code_dir());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMaster_code_dir()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.master_code_dir, typedOther.master_code_dir);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNode_host()).compareTo(typedOther.isSetNode_host());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNode_host()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.node_host, typedOther.node_host);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExecutor_node_port()).compareTo(typedOther.isSetExecutor_node_port());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExecutor_node_port()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.executor_node_port, typedOther.executor_node_port);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExecutor_start_time_secs()).compareTo(typedOther.isSetExecutor_start_time_secs());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExecutor_start_time_secs()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.executor_start_time_secs, typedOther.executor_start_time_secs);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetWorker_resources()).compareTo(typedOther.isSetWorker_resources());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWorker_resources()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.worker_resources, typedOther.worker_resources);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOwner()).compareTo(typedOther.isSetOwner());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOwner()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.owner, typedOther.owner);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Assignment(");
    boolean first = true;

    sb.append("master_code_dir:");
    if (this.master_code_dir == null) {
      sb.append("null");
    } else {
      sb.append(this.master_code_dir);
    }
    first = false;
    if (isSetNode_host()) {
      if (!first) sb.append(", ");
      sb.append("node_host:");
      if (this.node_host == null) {
        sb.append("null");
      } else {
        sb.append(this.node_host);
      }
      first = false;
    }
    if (isSetExecutor_node_port()) {
      if (!first) sb.append(", ");
      sb.append("executor_node_port:");
      if (this.executor_node_port == null) {
        sb.append("null");
      } else {
        sb.append(this.executor_node_port);
      }
      first = false;
    }
    if (isSetExecutor_start_time_secs()) {
      if (!first) sb.append(", ");
      sb.append("executor_start_time_secs:");
      if (this.executor_start_time_secs == null) {
        sb.append("null");
      } else {
        sb.append(this.executor_start_time_secs);
      }
      first = false;
    }
    if (isSetWorker_resources()) {
      if (!first) sb.append(", ");
      sb.append("worker_resources:");
      if (this.worker_resources == null) {
        sb.append("null");
      } else {
        sb.append(this.worker_resources);
      }
      first = false;
    }
    if (isSetOwner()) {
      if (!first) sb.append(", ");
      sb.append("owner:");
      if (this.owner == null) {
        sb.append("null");
      } else {
        sb.append(this.owner);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (master_code_dir == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'master_code_dir' was not present! Struct: " + toString());
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class AssignmentStandardSchemeFactory implements SchemeFactory {
    public AssignmentStandardScheme getScheme() {
      return new AssignmentStandardScheme();
    }
  }

  private static class AssignmentStandardScheme extends StandardScheme<Assignment> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Assignment struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // MASTER_CODE_DIR
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.master_code_dir = iprot.readString();
              struct.setMaster_code_dirIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // NODE_HOST
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map618 = iprot.readMapBegin();
                struct.node_host = new HashMap<String,String>(2*_map618.size);
                for (int _i619 = 0; _i619 < _map618.size; ++_i619)
                {
                  String _key620; // required
                  String _val621; // required
                  _key620 = iprot.readString();
                  _val621 = iprot.readString();
                  struct.node_host.put(_key620, _val621);
                }
                iprot.readMapEnd();
              }
              struct.setNode_hostIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // EXECUTOR_NODE_PORT
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map622 = iprot.readMapBegin();
                struct.executor_node_port = new HashMap<List<Long>,NodeInfo>(2*_map622.size);
                for (int _i623 = 0; _i623 < _map622.size; ++_i623)
                {
                  List<Long> _key624; // required
                  NodeInfo _val625; // required
                  {
                    org.apache.thrift.protocol.TList _list626 = iprot.readListBegin();
                    _key624 = new ArrayList<Long>(_list626.size);
                    for (int _i627 = 0; _i627 < _list626.size; ++_i627)
                    {
                      long _elem628; // required
                      _elem628 = iprot.readI64();
                      _key624.add(_elem628);
                    }
                    iprot.readListEnd();
                  }
                  _val625 = new NodeInfo();
                  _val625.read(iprot);
                  struct.executor_node_port.put(_key624, _val625);
                }
                iprot.readMapEnd();
              }
              struct.setExecutor_node_portIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // EXECUTOR_START_TIME_SECS
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map629 = iprot.readMapBegin();
                struct.executor_start_time_secs = new HashMap<List<Long>,Long>(2*_map629.size);
                for (int _i630 = 0; _i630 < _map629.size; ++_i630)
                {
                  List<Long> _key631; // required
                  long _val632; // required
                  {
                    org.apache.thrift.protocol.TList _list633 = iprot.readListBegin();
                    _key631 = new ArrayList<Long>(_list633.size);
                    for (int _i634 = 0; _i634 < _list633.size; ++_i634)
                    {
                      long _elem635; // required
                      _elem635 = iprot.readI64();
                      _key631.add(_elem635);
                    }
                    iprot.readListEnd();
                  }
                  _val632 = iprot.readI64();
                  struct.executor_start_time_secs.put(_key631, _val632);
                }
                iprot.readMapEnd();
              }
              struct.setExecutor_start_time_secsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // WORKER_RESOURCES
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map636 = iprot.readMapBegin();
                struct.worker_resources = new HashMap<NodeInfo,WorkerResources>(2*_map636.size);
                for (int _i637 = 0; _i637 < _map636.size; ++_i637)
                {
                  NodeInfo _key638; // required
                  WorkerResources _val639; // required
                  _key638 = new NodeInfo();
                  _key638.read(iprot);
                  _val639 = new WorkerResources();
                  _val639.read(iprot);
                  struct.worker_resources.put(_key638, _val639);
                }
                iprot.readMapEnd();
              }
              struct.setWorker_resourcesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // OWNER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.owner = iprot.readString();
              struct.setOwnerIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Assignment struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.master_code_dir != null) {
        oprot.writeFieldBegin(MASTER_CODE_DIR_FIELD_DESC);
        oprot.writeString(struct.master_code_dir);
        oprot.writeFieldEnd();
      }
      if (struct.node_host != null) {
        if (struct.isSetNode_host()) {
          oprot.writeFieldBegin(NODE_HOST_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.node_host.size()));
            for (Map.Entry<String, String> _iter640 : struct.node_host.entrySet())
            {
              oprot.writeString(_iter640.getKey());
              oprot.writeString(_iter640.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.executor_node_port != null) {
        if (struct.isSetExecutor_node_port()) {
          oprot.writeFieldBegin(EXECUTOR_NODE_PORT_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.LIST, org.apache.thrift.protocol.TType.STRUCT, struct.executor_node_port.size()));
            for (Map.Entry<List<Long>, NodeInfo> _iter641 : struct.executor_node_port.entrySet())
            {
              {
                oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, _iter641.getKey().size()));
                for (long _iter642 : _iter641.getKey())
                {
                  oprot.writeI64(_iter642);
                }
                oprot.writeListEnd();
              }
              _iter641.getValue().write(oprot);
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.executor_start_time_secs != null) {
        if (struct.isSetExecutor_start_time_secs()) {
          oprot.writeFieldBegin(EXECUTOR_START_TIME_SECS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.LIST, org.apache.thrift.protocol.TType.I64, struct.executor_start_time_secs.size()));
            for (Map.Entry<List<Long>, Long> _iter643 : struct.executor_start_time_secs.entrySet())
            {
              {
                oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, _iter643.getKey().size()));
                for (long _iter644 : _iter643.getKey())
                {
                  oprot.writeI64(_iter644);
                }
                oprot.writeListEnd();
              }
              oprot.writeI64(_iter643.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.worker_resources != null) {
        if (struct.isSetWorker_resources()) {
          oprot.writeFieldBegin(WORKER_RESOURCES_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRUCT, org.apache.thrift.protocol.TType.STRUCT, struct.worker_resources.size()));
            for (Map.Entry<NodeInfo, WorkerResources> _iter645 : struct.worker_resources.entrySet())
            {
              _iter645.getKey().write(oprot);
              _iter645.getValue().write(oprot);
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.owner != null) {
        if (struct.isSetOwner()) {
          oprot.writeFieldBegin(OWNER_FIELD_DESC);
          oprot.writeString(struct.owner);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class AssignmentTupleSchemeFactory implements SchemeFactory {
    public AssignmentTupleScheme getScheme() {
      return new AssignmentTupleScheme();
    }
  }

  private static class AssignmentTupleScheme extends TupleScheme<Assignment> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Assignment struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeString(struct.master_code_dir);
      BitSet optionals = new BitSet();
      if (struct.isSetNode_host()) {
        optionals.set(0);
      }
      if (struct.isSetExecutor_node_port()) {
        optionals.set(1);
      }
      if (struct.isSetExecutor_start_time_secs()) {
        optionals.set(2);
      }
      if (struct.isSetWorker_resources()) {
        optionals.set(3);
      }
      if (struct.isSetOwner()) {
        optionals.set(4);
      }
      oprot.writeBitSet(optionals, 5);
      if (struct.isSetNode_host()) {
        {
          oprot.writeI32(struct.node_host.size());
          for (Map.Entry<String, String> _iter646 : struct.node_host.entrySet())
          {
            oprot.writeString(_iter646.getKey());
            oprot.writeString(_iter646.getValue());
          }
        }
      }
      if (struct.isSetExecutor_node_port()) {
        {
          oprot.writeI32(struct.executor_node_port.size());
          for (Map.Entry<List<Long>, NodeInfo> _iter647 : struct.executor_node_port.entrySet())
          {
            {
              oprot.writeI32(_iter647.getKey().size());
              for (long _iter648 : _iter647.getKey())
              {
                oprot.writeI64(_iter648);
              }
            }
            _iter647.getValue().write(oprot);
          }
        }
      }
      if (struct.isSetExecutor_start_time_secs()) {
        {
          oprot.writeI32(struct.executor_start_time_secs.size());
          for (Map.Entry<List<Long>, Long> _iter649 : struct.executor_start_time_secs.entrySet())
          {
            {
              oprot.writeI32(_iter649.getKey().size());
              for (long _iter650 : _iter649.getKey())
              {
                oprot.writeI64(_iter650);
              }
            }
            oprot.writeI64(_iter649.getValue());
          }
        }
      }
      if (struct.isSetWorker_resources()) {
        {
          oprot.writeI32(struct.worker_resources.size());
          for (Map.Entry<NodeInfo, WorkerResources> _iter651 : struct.worker_resources.entrySet())
          {
            _iter651.getKey().write(oprot);
            _iter651.getValue().write(oprot);
          }
        }
      }
      if (struct.isSetOwner()) {
        oprot.writeString(struct.owner);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Assignment struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.master_code_dir = iprot.readString();
      struct.setMaster_code_dirIsSet(true);
      BitSet incoming = iprot.readBitSet(5);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TMap _map652 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.node_host = new HashMap<String,String>(2*_map652.size);
          for (int _i653 = 0; _i653 < _map652.size; ++_i653)
          {
            String _key654; // required
            String _val655; // required
            _key654 = iprot.readString();
            _val655 = iprot.readString();
            struct.node_host.put(_key654, _val655);
          }
        }
        struct.setNode_hostIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TMap _map656 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.LIST, org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.executor_node_port = new HashMap<List<Long>,NodeInfo>(2*_map656.size);
          for (int _i657 = 0; _i657 < _map656.size; ++_i657)
          {
            List<Long> _key658; // required
            NodeInfo _val659; // required
            {
              org.apache.thrift.protocol.TList _list660 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, iprot.readI32());
              _key658 = new ArrayList<Long>(_list660.size);
              for (int _i661 = 0; _i661 < _list660.size; ++_i661)
              {
                long _elem662; // required
                _elem662 = iprot.readI64();
                _key658.add(_elem662);
              }
            }
            _val659 = new NodeInfo();
            _val659.read(iprot);
            struct.executor_node_port.put(_key658, _val659);
          }
        }
        struct.setExecutor_node_portIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TMap _map663 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.LIST, org.apache.thrift.protocol.TType.I64, iprot.readI32());
          struct.executor_start_time_secs = new HashMap<List<Long>,Long>(2*_map663.size);
          for (int _i664 = 0; _i664 < _map663.size; ++_i664)
          {
            List<Long> _key665; // required
            long _val666; // required
            {
              org.apache.thrift.protocol.TList _list667 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, iprot.readI32());
              _key665 = new ArrayList<Long>(_list667.size);
              for (int _i668 = 0; _i668 < _list667.size; ++_i668)
              {
                long _elem669; // required
                _elem669 = iprot.readI64();
                _key665.add(_elem669);
              }
            }
            _val666 = iprot.readI64();
            struct.executor_start_time_secs.put(_key665, _val666);
          }
        }
        struct.setExecutor_start_time_secsIsSet(true);
      }
      if (incoming.get(3)) {
        {
          org.apache.thrift.protocol.TMap _map670 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRUCT, org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.worker_resources = new HashMap<NodeInfo,WorkerResources>(2*_map670.size);
          for (int _i671 = 0; _i671 < _map670.size; ++_i671)
          {
            NodeInfo _key672; // required
            WorkerResources _val673; // required
            _key672 = new NodeInfo();
            _key672.read(iprot);
            _val673 = new WorkerResources();
            _val673.read(iprot);
            struct.worker_resources.put(_key672, _val673);
          }
        }
        struct.setWorker_resourcesIsSet(true);
      }
      if (incoming.get(4)) {
        struct.owner = iprot.readString();
        struct.setOwnerIsSet(true);
      }
    }
  }

}

